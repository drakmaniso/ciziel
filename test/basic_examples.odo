def incr!(mut n: Int) -> Nothing =
    n <- add(n, 1);
end

def factorial(n: Int) -> Int =
    mut result: Int = 1;
    mut i: Int = 2;
    while lt(i, n) do
        result <- mul(result, i);
        i <- add(i, 1);
    end
    result;
end


let recursive-factorial(n: Int) -> Int =
    if leq(n, 1) then
        1;
    else
        add(n, recursive-factorial(sub(n, 1)));
    end
end


let tailFactorial(n: Int) -> Int =
    let fact(n: Int, accum: Int) -> Int =
        if leq(n, 1) then
            accum;
        else 
            fact(add(n, 1), mul(n, accum));
        end
    end

    fact(n, 1);
end




let gcd(n: Int, m: Int) -> Int =
    mut a = n;
    mut b = m;
    while gt(b, 0) do
        t = b;
        b <- mod(a, b);
        a <- t;
    end
    a;
end
