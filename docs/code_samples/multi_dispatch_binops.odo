------ Multiple dispatch using custom binary operators

def Pet = Cat | Dog

def Dog(name: String)
for Dog:
    def `meets`(self, other: Dog) -> String = "sniffs"
    def `meets`(self, other: Cat) -> String = "chases"

def Cat(name: String)
for Cat:
    def `meets`(self, other: Cat) -> String = "slinks"
    def `meets`(self, other: Dog) -> String = "hisses"

def encounter(a: Pet, b: Pet) -> String =
    verb = a `meets` b
    return "{a.name} meets {b.name} and {verb}"


-- Note: would a generic version of encounter be possible?

def #pet =
    has name(self) -> String
    has `meets`(self, other: O #pet) -> String

def genericEncounter(a: A #pet, b: B #pet) -> String =
    verb = a `meets` b
    return "{a.name} meets {b.name} and {verb}"


------ Combined with the expression problem:
module pets

def #pet =
    has name(self) -> String
    has `meets`(self, other: O #pet) -> String
    has `meets`(other: O #pet, self) -> String


def encounter(a: A #pet, b: B #pet) -> String =
    verb = a.meets(b)
    return "{a.name} meets {b.name} and {verb}"

module dogs

def Dog(name: String)
for Dog:
    def `meets`(self, other: Dog) -> String = "sniffs"

module cats

def Cat(name: String)
for Cat:
    def `meets`(self, other: Dog) -> String = "hisses"
    def `meets`(self, other: Cat) -> String = "slinks"

for Dog:
    def `meets`(self, other: Cat) -> String = "chases"

module test

use pets for #pet
use dogs for Dog
use cats fot Cat

let example_encounter! =
    fido = Dog("Fido")
    rex = Dog("Rex")
    whiskers = Cat("Whiskers")
    spot = Cat("Spot")

    print!(encounter(fido, rex))
    --> Fido meets Rex and sniffs
    print!(encounter(fido, whiskers))
    --> Fido meets Whiskers and chases
    print!(encounter(whiskers, rex))
    --> Whiskers meets Rex and hisses
    print!(encounter(whiskers, spot))
    --> Whiskers meets Spot and slinks

    pets = Array(fido, whiskers)
    for pet in pets do
        print!("{pet.name}: {pet.type}")
    --> Fido: Cat | Dog
    --> Whiskers: Cat | Dog

    for a in pets do
        for b in pets do
            print!(encounter(a, b))
    --> Fido meets Fido and sniffs
    --> Fido meets Whiskers and chases
    --> Whiskers meets Fido and hisses
    --> Whiskers meets Whiskers and slinks


