------ Multiple dispatch emulated with double single dispatch
module pets

def #pet =
    has #visitor
    has Self(name: String, ...)
    has meet(self, other: A #pet) -> String

let #visitor =
    has visit-dog(self, other: Dog) -> String
    has visit-cat(self, other: Cat) -> String

def encounter(a: A #pet, b: B #pet) -> String =
    verb = a.meets(b)
    return "{a.name} meets {b.name} and {verb}"

def Dog(name: String)
for Dog as #pet:
    def meet(self, other: B #pet) -> String = other.visit-dog(self)
for Dog as #visitor:
    let visit-dog(self, other: Dog) -> String = "sniffs"
    let visit-cat(self, other: Cat) -> String = "chases"

def Cat(name: String)
for Cat as #pet:
    def meet(self, other: A #pet) -> String = other.visit-cat(self)
for Cat as #visitor:
    def visit-dog(self, other: Dog) -> String = "hisses"
    def visit-cat(self, other: Cat) -> String = "slinks"


let example_encounter! =
    fido = Dog("Fido")
    rex = Dog("Rex")
    whiskers = Cat("Whiskers")
    spot = Cat("Spot")

    print!(encounter(fido, rex))
    --> Fido meets Rex and sniffs
    print!(encounter(fido, whiskers))
    --> Fido meets Whiskers and chases
    print!(encounter(whiskers, rex))
    --> Whiskers meets Rex and hisses
    print!(encounter(whiskers, spot))
    --> Whiskers meets Spot and slinks

    pets = Array(fido, whiskers)
    for pet in pets do
        print!("{pet.name}: {pet.type}")
    --> Fido: Cat | Dog
    --> Whiskers: Cat | Dog

    for a in pets do
        for b in pets do
            print!(encounter(a, b))
    --> Fido meets Fido and sniffs
    --> Fido meets Whiskers and chases
    --> Whiskers meets Fido and hisses
    --> Whiskers meets Whiskers and slinks
