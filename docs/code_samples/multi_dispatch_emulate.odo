------ Multiple dispatch emulated with double single dispatch
module pets

def #pet =
    has name(self) -> String
    has meets(self, other: B #pet) -> String
    has metByDog(self) -> String
    has metByCat(self) -> String

def encounter(a: A #pet, b: B #pet) -> String =
    verb = a.meets(b)
    return "{a.name} meets {b.name} and {verb}"

def Dog(name: String)
for Dog:
    def meets(self, other: B #pet) -> String = other.metByDog
    def metByDog(self) -> String = "sniffs"
    def metByCat(self) -> String = "hisses"

def Cat(name: String)
for Cat:
    def meets(self, other: A #pet) -> String = other.metByCat
    def metByDog(self) -> String = "chases"
    def metByCat(self) -> String = "slinks"


let example_encounter! =
    fido = Dog("Fido")
    rex = Dog("Rex")
    whiskers = Cat("Whiskers")
    spot = Cat("Spot")

    print!(encounter(fido, rex))
    --> Fido meets Rex and sniffs
    print!(encounter(fido, whiskers))
    --> Fido meets Whiskers and chases
    print!(encounter(whiskers, rex))
    --> Whiskers meets Rex and hisses
    print!(encounter(whiskers, spot))
    --> Whiskers meets Spot and slinks

    pets = Array(fido, whiskers)
    for pet in pets do
        print!("{pet.name}: {pet.type}")
    --> Fido: Cat | Dog
    --> Whiskers: Cat | Dog

    for a in pets do
        for b in pets do
            print!(encounter(a, b))
    --> Fido meets Fido and sniffs
    --> Fido meets Whiskers and chases
    --> Whiskers meets Fido and hisses
    --> Whiskers meets Whiskers and slinks


------ Same thing, combined with the expression problem
module pets

def #pet =
    has name(self) -> String
    has meets(self, other: B) -> String

def encounter(a: A #pet, b: B #pet) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


module dog

use pets for #pet

def #metByDog =
    def metByDog(self) -> String

def Dog(name: String)
for Dog:
    def meets(self, other: B #metByDog) -> String = other.metByDog
    def metByDog(self) -> String = "sniffs"


module cat

use pets for #pets
use dog for Dog, #metByDog

def #metByCat =
    has metByCat(self) -> String
for Dog:
    def metByCat(self) -> String = "hisses"

def Cat(name: String)
for Cat:
    def meets(self, other: A #metByCat) -> String = other.metByCat
    def metByDog(self) -> String = "chases"
    def metByCat(self) -> String = "slinks"


module main

use pets for #pet
use dog for Dog
use cat for Cat

let example_encounter! =
    ...

