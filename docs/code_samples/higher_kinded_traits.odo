def Self[T] #functor =
    has map(self, f: T -> U) -> Self[U]

    def lift(function: A -> B) -> (F[A] #functor -> F[B]) =
        func(x: F[A]) => x.map(function)


def #map = #functor

def Self[T] #monad =
    has wrap(item: T) -> Self[T]
    has bind(self, f: A -> Self[B]) -> Self[B]
    def join(monad: Self[Self[A]]) -> Self[A] =
        self.bind(identity)
    
def join(monad: M[M[A]] #monad) -> M[A] =
    monad.bind(identity)


