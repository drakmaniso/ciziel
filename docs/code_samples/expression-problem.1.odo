module foo


trait #eval =
	func (Self).eval -> Int


struct Literal =
	value: Int
with
	#eval


struct Addition[T] =
	left: Expr[T]
	right: Expr[T]
with
	#eval


func (self: Literal).eval -> Int =
	self.value


func (self: Addition[T#eval]).eval -> Int =
	self.left.eval + self.right.eval


------
module bar

use foo (#eval, Literal, Addition)


trait #pretty
	func (Self).pretty -> String


struct Negation[T] =
	subexpr: T
with
	#eval, #pretty


func (self: Negation[T#eval]).eval -> Int =
	- self.subexpr.eval


func (self: Literal).pretty -> String =
	self.eval.as-string


func (self: Addition[T#pretty]).pretty -> String =
	"{self.left.pretty} + {self.right.pretty}"


func (self: Negation[T#pretty]).pretty -> String =
	match self.subexpr
	case e = Literal(...) then
		"-{e.pretty}"
	else
		"- ({self.subexpr.pretty})"


------
module main

use foo (#eval, Literal, Addition)
use bar (#pretty, Negation)

union Expr = Literal | Addition[Expr] | Negation[Expr]

func main!(io: sole Console):
	e1 = Addition(Literal(77), Negation(Literal(12))
	io.print!("{e1.pretty} = {e1.eval}")
