module Foo


Expr A =
	type
		Literal Int
		Addition{left: Expr A, right: Expr A}
	end


eval(self: Expr A) -> Int =
	with
		eval(A) -> Int
	case self
	of Literal v then v
	of Addition{left, right} then 'eval(left) + 'eval(right)
	end


module Bar


Expr A =
	type
		Literal (Foo.Literal: Foo.Expr A)
		Addition (Foo.Addition: Foo.Expr A)
		Negation{expr: Expr A}
	end


Foo.eval(self: Expr A) -> Int =
	with
		eval(A) -> Int
	case self
	of Negation{expr} then -'eval(expr)
	else 'eval(self as Foo.Expr A)
	end


pretty_string(expr: Foo.Expr A) -> String! =
	with
		pretty_string(A) -> String!
	case expr
	of Foo.Literal v then "{v}"
	of Foo.Addition{left, right} then
		l = 'pretty_string(left)
		r = 'pretty_string(right)
		"{l} +{r}"
	end


pretty_string(self: Expr A) -> String! =
	with
		pretty_string(A) -> String!
	case self
	of Negation{expr} then
		case expr
		of Literal v then "-{v}"
		else
			e = 'pretty_string(expr)
			"-({e})"
		end
	else 'pretty_string(self as Foo.Expr A)
	end

