module main

-- The language type system will be based on System CT from:
-- "Type Inference for Overloading without Restrictions, Declarations or Annotations"
-- by Carlos Camarão and Lucília Figueiredo


better_factorial(n: N) -> N =
	with
		literal(Int) -> N
		N <= N -> Bool
		N - N -> N
		N * N -> N
	do
		loop(n: N, accum: N) -> N =
			if n <= 1 then accum
			else loop(n - 1, n * accum)
			end

		loop(n, 1)
	end

-- or:

better_factorial(n: N) -> N =
	with
		one: N
		N <= N -> Bool
		N - N -> N
		N * N -> N
	do
		loop(n, accum) =
			if n <= 'one then accum
			else loop(n - 'one, n * accum)
			end

		loop(n, 'one)
	end


idiomatic_factorial(n: N) -> N =
	with
		one: N
		range(N, N) -> Iter N
		-- fold(Iter N, N, (N, N) -> N)
		N + N -> N
		N * N -> N
	do
		(one' to n + one')
			.fold(one', (n, accum) -> n * accum)
	end


gcd(a: N, b: N) -> N =
	with
		literal(Int) -> N
		N > N -> Bool
		N == N -> Bool
		modulo(N, N) -> N
	require
		a > 0
		b > 0
	ensure
		result > 0
	do
		loop(a, b) =
			if b == 0 then a
			else
				(c, d) = if a > b then (b, a) else (a, b) end
				loop(c, d .modulo c)
			end

		loop(a, b)
	end


----

leaves(tree) =
	case tree
	of Leaf {item} then wrap(item)
	of Branch {left, right} then
		leaves(left) .union (leaves(right))
	end

leaves_example =
	my_tree = ... -- make and populate a Tree Int
	a: Array! Int = leaves(my_tree)
	b: List! Int = leaves(my_tree)
	b: Set! Int = leaves(my_tree)


----


print_each(f: FUNCTOR X, io: Console!, function: X -> String) -> Console! =
	f.fold(f, io, (x, io) -> io.print x)

----

-- System should have principal typings (and not just principal types)
y(x: X) -> Y =
	with
		X(X) -> Y
		-- or: X is X -> Y
		-- or: apply(X, X) -> Y
	do
		x(x)
	end

