module main

-- The language type system *may* be based on System CT from:
-- "Type Inference for Overloading without Restrictions, Declarations or Annotations"
-- by Carlos Camarão and Lucília Figueiredo


better_factorial(n: N) -> N =
	forall
		literal(Int) -> N
		N <= N -> Bool
		N - N -> N
		N * N -> N
	
	fact(n: N, accum: N) -> N =
		if n <= 1 then accum
		else fact(n - 1, n * accum)

	return fact(n, 1)

-- or:

better_factorial(n: N) -> N =
	forall
		N.one -> N
		N <= N -> Bool
		N - N -> N
		N * N -> N
	
	fact(n, accum) =
		if n <= N.one then accum
		else fact(n - N.one, n * accum)

	return fact(n, N.one)


idiomatic_factorial(n: N) -> N =
	forall
		one: N
		range(N, N) -> Iter N
		-- fold(Iter N, N, (N, N) -> N)
		N + N -> N
		N * N -> N

	return (N.one to n + N.one).fold(N.one, *)


gcd(a: N, b: N) -> N =
	forall
		literal(Int) -> N
		N > N -> Bool
		N == N -> Bool
		modulo(N, N) -> N
	require
		a > 0
		b > 0
	ensure
		result > 0
	
	step(a, b) =
		if b == 0 then a
		else step(c, d .modulo c)

	return step(a, b)


----

leaves(tree: Tree[A]) -> B[A] =
	forall
		B.wrap(A) -> B[A]
		union(B[A], B[A]) -> B[A]
	
	case tree
	of Leaf(item) then B.wrap(item)
	of Branch(left, right) then
		leaves(left).union(leaves(right))
	end


leaves_example =
	my_tree = ... -- make and populate a Tree[Int]
	a: Array[Int] = leaves(my_tree)
	b: List[Int] = leaves(my_tree)
	c: Set[Int] = leaves(my_tree)



----

-- System should have principal typings (and not just principal types)
y(x: X) -> Y =
	with
		X(X) -> Y
		-- or: X is X -> Y
		-- or: apply(X, X) -> Y
	do
		x(x)
	end

