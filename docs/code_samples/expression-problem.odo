module foo


def #eval =
	eval(self) -> Int

def Literal(eval: Int)

def Addition[T](left: Expr[T], right: Expr[T])

for Addition[T #eval]:
	def eval(self) -> Int =
		self.left.eval + self.right.eval


------
module bar

use foo: #eval, Literal, Addition

def #pretty =
	pretty(self) -> String

for Literal:
	def pretty(self) -> String =
		self.eval.as-string

for Addition[T #pretty]:
	def pretty(self) -> String =
		"{self.left.pretty} + {self.right.pretty}"

def Negation[T](subexpr: T)

for Negation[T #eval]:
	def eval(self) -> Int =
		- self.subexpr.eval

for Negation[T #pretty]:
	def pretty(self) -> String =
		match self.subexpr
		case e::Literal then
			"-{e.pretty}"
		case _ then
			"- ({self.subexpr.pretty})"


------
module main

use foo: #eval, Literal, Addition
use bar: #pretty, Negation

def Expr = Literal | Addition[Expr] | Negation[Expr]

def main!(io: Console) =
	let e1 = Addition(Literal(77), Negation(Literal(12))
	io.print!("{e1.pretty} = {e1.eval}")

