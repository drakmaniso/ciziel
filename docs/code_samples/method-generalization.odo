module trivial-generalization

def Pet = Cat | Dog

def Cat(name: String)
def Dog(name: String)

for Cat:
    def happy(self) -> String = "{self.name} purrs!"
    def unhappy-with(self, intruder: String) -> String = "{self.name} hisses at {intruder}!"

for Dog:
    def happy(self) -> String = "{self.name} wags their tail!"
    def unhappy-with(self, intruder: String) -> String = "{self.name} barks at {intruder}!"

let example! =
    let mut pet: Cat | Dog

    pet <- Cat("Spot")
    print!(pet.happy)
    --> Spot purrs!
    print!(pet.unhappy-with("owner"))
    --> Spot hisses at owner!

    pet <- Dog("Ash")
    print!(pet.happy)
    --> Ash wags their tail!
    print!(pet.unhappy-with("owner"))
    --> Ash hisses at owner!


-- Static methods are also generalized, but they're only accessible
-- through variables. In other words, it's impossible to call a static
-- method directly on the name of a union type.

for Cat:
    def sounds: String = ["meow", "purr", "yowl", "hiss"]

for Dog:
    def sounds: String = ["bark", "growl", "whimper", "howl"]

-- This is the correct way to call a static method on a union:
let example! =
    my-pet: Pet = Cat("Whiskers")
    print!(my-pet.sounds)

-- But he following does not compile:
--(
let incorrect_example =
    print!(Pet.sounds)
)--

-- Instead, you can define the method on the union type directly. However
-- this prevents you to define the same method on the individual types.
for Cat | Dog:
    def petSounds: String = ["meow", "bark", ...]


------
module simple-generalization

def Foo
def Bar

for Foo:
    def generalized(self, x: Int) -> Int = 2 * x
    def not-generalized(self, x: Int) -> Int = 3 * x


for Bar:
    def generalized(self, x: Int) -> String = "4 * {x}"
    def not-generalized(self, x: String) -> Int = 5 * x.toInt

let example! =
    mut a: Foo | Bar

    a <- Foo
    print!(a.generalized(10))
    --> 20
    a <- Bar
    print!(a.generalized(10))
    --> 4 * 10
    print!(a.generalized.type-info)
    --> Func(Bar | Foo, Int) -> Int | String

    -- But the following cannot compile:
    -- print!(a.notGeneralized(10))
    -- print!(a.notGeneralized("ten"))

