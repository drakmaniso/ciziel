module do_notation


example1(a: String, b: String) -> Maybe[Float] =
	x? = Float.parse(a)
	y? = Float.parse(b)
	z = x + 1.0
	return z safediv y

example1_desugared(a, b) =
	Float.parse(a).bind(x ->
		Float.parse(b).bind(y ->
			z = x + 1
			z safediv y
		)
	)


example2(a: String, b: String) -> Maybe[Float] =
	x? = Float.parse(a)
	y? = Float.parse(b)
	return Some(x + y)

example2_desugared(a: String, b: String) -> Maybe[Float] =
	Float.parse(a).bind (x ->
		Float.parse(b).bind (y ->
			Maybe.wrap(x + y)
		)
	)

-- If the monad type is generic:
example3(a: String, b: String) -> M[Float] =
	forall
		M: Monad
	x? = Float.parse(a)
	y? = Float.parse(b)
	return M.wrap(a + b)


