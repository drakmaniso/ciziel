module Maybe

using Functor
using Monad


Maybe[A] =

None = ()

Some[A] = item: A


map(self: Maybe[A], fn: A -> B) -> Maybe[B] =
	case self
	of None then None
	of Some(item) then Some(fn(item))
	end


wrap(item: A) -> Maybe[A] =
	Some(item)


bind(self: Maybe[A], fn: A -> Maybe[B]) -> Maybe[B] =
	case self
	of None then None
	of Some(item) then function(item)
	end

