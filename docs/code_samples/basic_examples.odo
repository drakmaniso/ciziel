module main

using std:console


main(io) =
	do
		io = io.put "Please enter a number: "
		number =
			case io.input.to_int
			of None then 121
			of Some n then n
			end
		
		naive = simple_factorial(number)
		better = better_factorial(number)
		idiomatic = idiomatic_factorial(number)

		io.print "naive factorial of {number}: {naive}"
			.print "better factorial of {number}: {better}"
			.print "idiomatic factorial of {number}: {idiomatic}"
	end


private


simple_factorial(n) =
	-- A naive implementation of factorial.
	if n <= 1 then 1
	else n * simple_factorial(n - 1)
	end


better_factorial(n: Int) -> Int =
	-- A tail-recursive implementation of factorial.
	do
		loop(n, accum) =
			if n <= 1 then accum
			else loop(n - 1, n * accum)
			end

		loop(n, 1)
	end


idiomatic_factorial(n: Int) -> Int =
	-- An implementation of factorial using abstracted
	-- iteration pattern `fold`.
	(1 to n + 1)
		.fold(1, (n, accum) -> n * accum)


gcd(a: Int, b: Int) -> Int =
	-- Returns the greatest common denominator of `a` and `b`.
	require
		a > 0
		b > 0
	ensure
		result > 0
	do
		loop(a, b) =
			if b == 0 then a
			else
				(c, d) = if a > b then (b, a) else (a, b) end
				loop(c, d .modulo c)
			end

		loop(a, b)
	end

