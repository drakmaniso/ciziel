module foo


trait #eval =
	(Self).eval -> Int


struct Literal =
	value: Int
	implement #eval


struct Addition[T] =
	left: Expr[T]
	right: Expr[T]
	forall T #eval implement #eval


func (Literal).eval -> Int =
	self.value


func (Addition[#eval]).eval -> Int =
	self.left.eval + self.right.eval


------
module bar

use foo (#eval, Literal, Addition)


trait #pretty
	(Self).pretty -> String
	implement Literal
	implement Addition[#pretty]


struct Negation[T] =
	subexpr: T
	forall T #eval implement #eval
	forall T #pretty implement #pretty


func (Negation[#eval]).eval -> Int =
	- self.subexpr.eval


func (Literal).pretty -> String =
	self.eval.as-string


func (Addition[#pretty]).pretty -> String =
	"{self.left.pretty} + {self.right.pretty}"


func (Negation[#pretty]).pretty -> String =
	match self.subexpr
	case e = Literal(...) then
		"-{e.pretty}"
	else
		"- ({self.subexpr.pretty})"


------
module main

use foo (#eval, Literal, Addition)
use bar (#pretty, Negation)

use foo (Literal, Addition)
use bar (Negation, +Literal, +Addition)

union Expr =
	Literal | Addition[Expr] | Negation[Expr]
	dispatch #eval
	dispatch #pretty

func main() -> Io[()] =
	e1 = Expr'Addition(Expr'Literal(77), Expr'Negation(Expr'Literal(12))
	Io'print("{e1.pretty} = {e1.eval}")
