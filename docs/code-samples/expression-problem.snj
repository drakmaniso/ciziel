/* The Expression Problem */


module basic
public


type Expr[E] =
	| Literal(value: data Int)
	| Addition(left: data ref E, right: data ref E)
	|;


trait #eval {
	fun (Self).eval -> Int
}


forall E #eval
extend Expr[E] as #eval


forall E #eval
fun (Expr[E]).eval -> Int =
	match self
		| Expr.Literal(value) -> value
		| Expr.Addition(left, right) -> left.eval + right.eval
		|;


-------------------------------------------------------------------------------
module extended
use basic (#eval)
public


type Expr[E] =
	| as basic::Expr[E].Literal
	| as basic::Expr[E].Addition
	| Negation(subexpr: data *E)
	|;


forall E #eval
extend Expr[E] as #eval


forall E #eval
fun (Expr[E]).eval -> Int =
	match self
		| Expr.Negation(subexpr) -> - subexpr.eval
		| e: basic::Expr[E] -> e.eval
		|;


trait #pretty {
	fun (Self).pretty -> String
}


forall E #pretty
extend basic::Expr[E] as #pretty


forall E #pretty
fun (basic::Expr[E]).pretty -> String =
	match self
		| basic::Expr.Literal(value) -> value.to-String
		| basic::Expr.Addition(left, right) ->
			l = self.left.pretty
			r = self.right.pretty

			case (self.left, self.right)
				| (Expr.Literal(...), Expr.Literal(...)) -> "{l} + {r}"
				| (Expr.Literal(...), _) -> "{l} + ({r})"
				| (_, Literal(...)) -> "({l}) + {r}"
				| (_, _) -> "({l}) + ({r})"
				|;
		|;


forall E #pretty
extend Expr[E] as #pretty


forall E #pretty
fun (Expr[E]).pretty -> String =
	match self
		| Expr.Negation(subexpr) -> "- ({subexpr.pretty})"
		| e: basic::Expr[E] -> e.pretty
		|;


-------------------------------------------------------------------------------
module main
use /std/io (&io)
use basic (#eval)
use extended (#pretty)
public


alias Expr = extended::Expr[Expr]
-- Or:
type Expr = as extended::Expr[Expr]
auto extend Expr as #eval
auto extend Expr as #pretty


fun main() -> Void &io =
	e1 = Expr.Addition(Expr.Literal(77), Expr.Negation(Expr.Literal(12)))
	print("{e1.pretty} = {e1.eval}")
