-- [Haskell's Typeclassopedia]: https:--wiki.haskell.org/Typeclassopedia


forall A
trait #functor[A] {
	type Self[A]

    fun (Self[A]).fmap(transform: A -> B) -> Self[B]

    fun (Self[A]) $> (value: B) -> Self[B] =
        self.map(() => value)

    fun Self[A].lift(transform: A -> B) -> (Self[A] -> Self[B]) =
        ___.map(transform)
}


-------------------------------------------------------------------------------


forall A
trait #applicative[A] {
	type Self[A]: #functor[A]

    -- aka `wrap`
    fun Self[A].pure(value: A) -> Self[A]

    -- aka `apply`
    fun (Self[A -> B]) <*> (functor: Self[A]) -> Self[B]

    -- aka `and-then`?
    fun (Self[A]) *> (other: Self[B]) -> Self[B] =
        (identity <$ a) <*> b

    -- aka `discard`? `case-also`?
    fun (Self[A]) <* (other: Self[B]) -> Self[A] =
		do
			const-f = { x, any -> x }

			Self.lift-2(const-f)
		end

    fun Self[Any].lift-2(f: (A, B) -> C) -> (Self[A], Self[B]) -> Self[C] =
		do
			curried-f: A -> B -> C = a => b => f(a, b)

			(a, b) =>
				Self.pure(curried-f) <*> Self.pure(a) <*> Self.pure(b)
		end
}


-------------------------------------------------------------------------------

trait #monad[A] {
    type Self[A]: #applicative[A]

    -- aka `chain`, `flat-map`, `bind`...
    fun (Self[A]) */= (operation: A -> Self[B]) -> Self[B]

    fun (Self[A]) */ (other: Self[B]) -> Self[B] =
        self */= (() => other)

	forall M: #monad
    fun (Self[M[A]]).join -> Self[A] =
        self.chain(identity)
}


trait #monad-fail[A] {
    trait #monad[A]

    fun Self[A].fail(msg: String) -> Self[A]
}


--TODO: is this correct?
trait #monad-trans[A] {
    fun Self[M, A].lift(monad: M[A]) -> Self[M, A]
}


trait #comonad[A] {
    trait #functor[A]

    fun (Self[A]).extract -> A

    fun (Self[A]).duplicate -> Self[Self[A]] =
        self.extend(identity)

    fun (Self[A]).extend(f: Self[A] -> B) -> Self[B] =
        self.duplicate.map(f)
}


-------------------------------------------------------------------------------


trait #semigroup {
    fun (Self).append(other: Self) -> Self
}


trait #monoid {
    trait #semigroup

    val Self.empty: Self

    forall A[Self]: #functor
    fun Self.concat(values: A[Self]) -> Self =
        values.fold(Self.append, Self.empty)
}


-------------------------------------------------------------------------------


trait #alternative[A] {
    trait #applicative[A]
    trait #monoid
}


trait #monad-plus[A] {
    trait #monad[A]
    trait #monoid
}


-------------------------------------------------------------------------------
trait #reduce[T] {
	forall T: #monoid
    fun (Self[T]).reduce(operation: (T, T) -> T) -> T

	forall T: #monoid
    fun (Self[T]).fold-map(operation: T -> A) -> A
}


forall T: #monoid
trait #reduce[T] {
    fun (Self).reduce(operation: (T, T) -> T) -> T
    fun (Self).fold-map(operation: T -> A) -> A
}

-- Catamorphisms
trait #foldable[T] {
    fun (Self)fold(initial: A, operation: (A, T) -> A) -> A
    fun (Self)rev-fold(initial: A, operation: (T, A) -> A) -> A
}

-- Anamorphisms
trait #unfoldable[T] {
    fun Self.unfold(initial: A, operation: A -> Option[(T, A)]) -> Self[T]
}

trait #traversable[T] {
    trait #functor[T]
    trait #foldable[T] -- or #reduce?
    fun (Self).traverse(operation: T -> F[B] #functor) -> F[Self[B]]
    fun Self.sequence(stuff: Self[F[T] #functor]) -> F[Self[T]]
}


-------------------------------------------------------------------------------


trait #bifunctor[T, U] {
    fun (Self).bimap(left-operation: T -> A, right-operation: U -> B) -> Self[A, B]

    fun (Self).left-map(left-operation: T -> A) -> Self[A, U] =
        self.bimap(left-operation, identity)

	fun (Self).right-map(right-operation: U -> A) -> Self[T, A] =
        self.bimap(identity, right-operation)
}


-------------------------------------------------------------------------------


trait #category[T, U] {
    val Self.id: Self[T, T]
    fun (Self).compose(other: Self[U -> A]) -> Self[T -> A]
}


trait #arrow[T, U]: #category[T, U] {
    fun Self.arrow(operation: T -> U) -> Self[T, U]
    fun (Self).first -> Self[(T, A), (U, A)]
    fun (Self).parrallel-compose(other: Self[A, B]) -> Self[(T, A), (U, B)]
    fun (Self).fanout-compose(other: Self[T, A]) -> Self[T, (U, A)]
}


trait #arrow-apply[T, U]: #arrow[T, U] {
    val Self.application: Self[(Self[A, B], A), B]
}


trait #arrow-loop[T, U]: #arrow[T, U] {
    fun Self.loop(Self[(A, C), (B, C)]) -> Self[A, B]
}


-------------------------------------------------------------------------------
trait #comonad[T]: #functor[T] {
    fun (Self).extract -> T
    fun (Self).duplicate -> Self[Self[T]]
    fun (Self).extend_(operation: Self[T] -> A) -> Self[A] =
        self.duplicate.map(operation)
}
