<< Multiple dispatch emulated with the Visitor pattern >>


--- Non Extensible `encounter` ------------------------------------------------


module pets
public

Cat = struct { name: data String }
Dog = struct { name: data String }

#usual-pet =
	trait {
		(Self).name -> String
		(Self).meets-usual(other: #usual-pet) -> String
		(Self).visit-cat(other: Cat) -> String
		(Self).visit-bird(other: Cat) -> String
	}

Cat: #usual-pet
Dog: #usual-pet

(Cat).meets-usual(other: #usual-pet) -> String =
    other.visit-cat(self)

(Dog).meets-usual(other: #usual-pet) -> String =
    other.visit-dog(self)

(Cat).visit-cat(other: Cat) -> String = "slinks"
(Cat).visit-dog(other: Dog) -> String = "hisses"
(Dog).visit-cat(other: Cat) -> String = "chases"
(Dog).visit-dog(other: Dog) -> String = "sniffs"


encounter-usual(a: A, b: B) -> String
	forall A: #usual-pet
		and B: #usual-pet
	=
    verb = a.meets-usual(b)
    "{a.name} meets {b.name} and {verb}"


module exotic-pets --- Extension
use pets (#usual-pet, Cat, Dog)
public

Bird = struct { def name: String }

Bird: #usual-pet

(Bird).visit-cat(other: Cat) -> String = "chirps"
(Bird).visit-dog(other: Dog) -> String = "chirps"

#exotic-pet <: #usual-pet =
	trait {
		(Self).meets-exotic(other: #exotic-pet) -> String
		(Self).visit-bird(other: Bird) -> String
	}

Cat: #exotic-pet
Dog: #exotic-pet
Bird: #exotic-pet

(Cat).meets-exotic(other: #exotic-pet) -> String =
    other.visit-cat(self)

(Dog).meets-exotic(other: #exotic-pet) -> String =
    other.visit-dog(self)

(Bird).meets-exotic(other: #exotic-pet) -> String =
    other.visit-bird(self)

(Cat).visit-bird(other: Bird) -> String = "hunts"
(Dog).visit-bird(other: Bird) -> String = "barks"
(Bird).visit-bird(other: Bird) -> String = "chirps"

encounter-exotic(a: A, b: B) -> String =
	forall A: #exotic-pet
		and B: #exotic-pet
	=
    let verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


-- Extensible Encounter -------------------------------------------------------


module pets
public

Cat[V] = struct(name: data String)
Dog[V] = struct(name: data String)


#pet =
	trait {
		(Self[V]).name -> String

		(Self[V]).meets(other: V.Pet) -> String
			forall V: #visitor
	}


#visitor =
	trait {
		Self.Pet: Type <: #pet
		Self.visit(a: Self.Pet, b: Self.Pet) -> String
	}


Visitor = struct
Visitor: #visitor
Visitor.Pet = Cat[Visitor] | Dog[Visitor]
Visitor.visit(a: Visitor.Pet, b: Visitor.Pet) -> String =
    case (a, b)
    of (Cat, Cat) then "slinks"
    of (Cat, Dog) then "hisses"
    of (Dog, Cat) then "chases"
    of (Dog, Dog) then "sniffs"
	end


encounter(a: P[V], b: P[V]) -> String
	forall P: #pet
		and V: #visitor
		and V.Pet == P[V]
	=
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


-------------------------------------------------------------------------------


module exotic-pets
public

Bird[V] = struct(def name: String)

Bird: #pet

Exotic-Visitor = struct
Exotic-Visitor: #visitor
Exotic-Visitor.Pet = Cat[Exotic-Visitor] | Dog[Exotic-Visitor] | Bird[Exotic-Visitor]
Exotic-Visitor.visit(a: Exotic-Visitor.Pet, b: Exotic-Visitor.Pet) -> String =
    case (a, b)
    of Cat, Bird then "hunts"
    of Dog, Bird then "barks"
    of Bird, Cat then "chirps"
    of Bird, Dog then "chirps"
    of Bird, Bird then "chirps"
    of a': Visitor.Pet, b': Visitor.Pet then
            Visitor.visit(a', b')
	end


## With Single Dispatch and Open Unions #######################################


module pets
public

Pet = Cat | Dog | ...
Cat = struct { data name: String }
Dog = struct { data name: String }

#meeter =
	trait {
		has (Self).meets(other: Pet) -> String
	}

#cat-visitor =
	trait {
		has (Self).visit-cat(other: Cat)
	}

#dog-visitor =
	trait {
		has (Self).visit-dog(other: Dog)
	}

Pet: #meeter

(Cat).meets(other: Pet) -> String =
    other.visit-cat(self)

(Dog).meets(other: Pet) -> String =
    other.visit-dog(self)

Pet: #cat-visitor
Pet: #dog-visitor

(Cat).visit-cat(other: Cat) -> String = "slinks"
(Cat).visit-dog(other: Dog) -> String = "hisses"
(Dog).visit-cat(other: Cat) -> String = "chases"
(Dog).visit-dog(other: Dog) -> String = "sniffs"

encounter(a: Pet, b: Pet) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


------------------------------------------------------------------------------------


module exotic-pets
use pets (Pet, Cat, Dog)
public

Pet = ...pets::Pet | Bird

Bird = struct { name: data String }

(Bird).meets(other: Pet) -> String =
    other.visit-bird(self)

(Bird).visit-cat(other: Cat) -> String = "chirps"
(Bird).visit-dog(other: Dog) -> String = "chirps"

#bird-visitor =
	trait {
		(Self).visit-bird(other: Bird) -> String
	}

Pet: #bird-visitor

(Cat).visit-bird(other: Bird) -> String = "hunts"
(Dog).visit-bird(other: Bird) -> String = "barks"
(Bird).visit-bird(other: Bird) -> String = "chirps"
