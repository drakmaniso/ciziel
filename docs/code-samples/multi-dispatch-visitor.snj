------ Multiple dispatch emulated with double single dispatch
module pets

trait #pet =
    #pet-visitor
    Self(name: String, ...)
    (Self).meets(other: #pet) -> String


trait #pet-visitor =
    (Self).visit-dog(other: Dog) -> String
    (Self).visit-cat(other: Cat) -> String


forall A #pet, B #pet
func encounter(a: A, b: B) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


struct Dog =
    name: String

func (Dog).meets(other: B #pet) -> String = other.visit-dog(self)
func (Dog).visit-dog(other: Dog) -> String = "sniffs"
func (Dog).visit-cat(other: Cat) -> String = "chases"


struct Cat =
    name: String

func (Cat).meets(other: A #pet) -> String = other.visit-cat(self)
func (Cat).visit-dog(other: Dog) -> String = "hisses"
func (Cat).visit-cat(other: Cat) -> String = "slinks"


func example-encounter(io: Console) -> Console =
    fido = Dog("Fido")
    rex = Dog("Rex")
    whiskers = Cat("Whiskers")
    spot = Cat("Spot")

    io := .print(encounter(fido, rex))
    --> Fido meets Rex and sniffs
    io .= print(encounter(fido, whiskers))
    --> Fido meets Whiskers and chases
    io!print(encounter(whiskers, rex))
    --> Whiskers meets Rex and hisses
    io <-> print(encounter(whiskers, spot))
    --> Whiskers meets Spot and slinks

    pets = {fido, whiskers}
    io := io.print("{pet[0].name}: {pet[0].type}")
    --> Fido: Cat | Dog
    io := io.print("{pet[1].name}: {pet[1].type}")
    --> Whiskers: Cat | Dog

    io := .print(encounter(pet[0], pet[0]))
    --> Fido meets Fido and sniffs
    io := .print(encounter(pet[0], pet[1]))
    --> Fido meets Whiskers and chases
    io := .print(encounter(pet[1], pet[0]))
    --> Whiskers meets Fido and hisses
    io := .print(encounter(pet[1], pet[1]))
    --> Whiskers meets Whiskers and slinks
