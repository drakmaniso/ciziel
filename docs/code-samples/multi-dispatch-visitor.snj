<< Multiple dispatch emulated with the Visitor pattern >>


-------------------------------------------------------------------------------
-- With Single Dispatch Only
-------------------------------------------------------------------------------


module pets
public

struct Cat { name: data String }
struct Dog { name: data String }

trait #usual-pet {
	fun (Self).name -> String
	fun (Self).meets-usual(other #usual-pet) -> String
	fun (Self).visit-cat(other: Cat) -> String
	fun (Self).visit-bird(other: Cat) -> String
}

tag Cat #usual-pet
tag Dog #usual-pet

fun (Cat).meets-usual(other #usual-pet) -> String =
    other.visit-cat(self)

fun (Dog).meets-usual(other #usual-pet) -> String =
    other.visit-dog(self)

fun (Cat).visit-cat(other: Cat) -> String = "slinks"
fun (Cat).visit-dog(other: Dog) -> String = "hisses"
fun (Dog).visit-cat(other: Cat) -> String = "chases"
fun (Dog).visit-dog(other: Dog) -> String = "sniffs"


forall A #usual-pet, B #usual-pet
fun encounter-usual(a: A, b: B) -> String =
    verb = a.meets-usual(b)
    "{a.name} meets {b.name} and {verb}"



-------------------------------------------------------------------------------


module exotic-pets
use pets (#usual-pet, Cat, Dog)
public

struct Bird { name: data String }

tag Bird #usual-pet

fun (Bird).visit-cat(other: Cat) -> String = "chirps"
fun (Bird).visit-dog(other: Dog) -> String = "chirps"

trait #exotic-pet {
	tag Self #usual-pet
	fun (Self).meets-exotic(other #exotic-pet) -> String
	fun (Self).visit-bird(other: Bird) -> String
}

tag Cat #exotic-pet
tag Dog #exotic-pet
tag Bird #exotic-pet

fun (Cat).meets-exotic(other #exotic-pet) -> String =
    other.visit-cat(self)

fun (Dog).meets-exotic(other #exotic-pet) -> String =
    other.visit-dog(self)

fun (Bird).meets-exotic(other #exotic-pet) -> String =
    other.visit-bird(self)

fun (Cat).visit-bird(other: Bird) -> String = "hunts"
fun (Dog).visit-bird(other: Bird) -> String = "barks"
fun (Bird).visit-bird(other: Bird) -> String = "chirps"

forall A #exotic-pet, B #exotic-pet
fun encounter-exotic(a: A, b: B) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


-------------------------------------------------------------------------------
-- With Single Dispatch, Phantom Types and Generics
-------------------------------------------------------------------------------


module pets
public

struct Cat[V](name: data String)
struct Dog[V](name: data String)


trait #pet {
	fun (Self[V]).name -> String

	forall V #visitor
	fun (Self[V]).meets(other: V.Pet) -> String
}


trait #visitor {
	type Self.Pet #pet
	fun Self.visit(a: Self.Pet, b: Self.Pet) -> String
}


struct Visitor
tag Visitor #visitor
type Visitor.Pet = Cat[Visitor] | Dog[Visitor]
fun Visitor.visit(a: Visitor.Pet, b: Visitor.Pet) -> String =
    case (a, b)
		of (Cat, Cat) then "slinks"
		of (Cat, Dog) then "hisses"
		of (Dog, Cat) then "chases"
		of (Dog, Dog) then "sniffs"
	end


forall P #pet,
	V #visitor,
	V.Pet == P[V]
fun encounter(a: P[V], b: P[V]) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


-------------------------------------------------------------------------------


module exotic-pets
public

struct Bird[V](def name: String)

tag Bird #pet

struct Exotic-Visitor
tag Exotic-Visitor #visitor
type Exotic-Visitor.Pet = Cat[Exotic-Visitor] | Dog[Exotic-Visitor] | Bird[Exotic-Visitor]
fun Exotic-Visitor.visit(a: Exotic-Visitor.Pet, b: Exotic-Visitor.Pet) -> String =
    case (a, b)
		of (Cat, Bird) then "hunts"
		of (Dog, Bird) then "barks"
		of (Bird, Cat) then "chirps"
		of (Bird, Dog) then "chirps"
		of (Bird, Bird) then "chirps"
		of (a': Visitor.Pet, b': Visitor.Pet) then
				Visitor.visit(a', b')
	end


-------------------------------------------------------------------------------
-- With Single Dispatch and Open Unions
-------------------------------------------------------------------------------


module pets
public

type Pet = Cat | Dog | ...
struct Cat { data name: String }
struct Dog { data name: String }

trait #meeter {
	fun (Self).meets(other: Pet) -> String
}

trait #cat-visitor {
	fun (Self).visit-cat(other: Cat)
}

trait #dog-visitor {
	fun (Self).visit-dog(other: Dog)
}

tag Pet #meeter

fun (Cat).meets(other: Pet) -> String =
    other.visit-cat(self)

fun (Dog).meets(other: Pet) -> String =
    other.visit-dog(self)

tag Pet #cat-visitor
tag Pet #dog-visitor

fun (Cat).visit-cat(other: Cat) -> String = "slinks"
fun (Cat).visit-dog(other: Dog) -> String = "hisses"
fun (Dog).visit-cat(other: Cat) -> String = "chases"
fun (Dog).visit-dog(other: Dog) -> String = "sniffs"

fun encounter(a: Pet, b: Pet) -> String =
    verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"


------------------------------------------------------------------------------------


module exotic-pets
use pets (Pet, Cat, Dog)
public

type Pet = ...pets::Pet | Bird

struct Bird { name: data String }

fun (Bird).meets(other: Pet) -> String =
    other.visit-bird(self)

fun (Bird).visit-cat(other: Cat) -> String = "chirps"
fun (Bird).visit-dog(other: Dog) -> String = "chirps"

trait #bird-visitor {
	fun (Self).visit-bird(other: Bird) -> String
}

tag Pet #bird-visitor

fun (Cat).visit-bird(other: Bird) -> String = "hunts"
fun (Dog).visit-bird(other: Bird) -> String = "barks"
fun (Bird).visit-bird(other: Bird) -> String = "chirps"
