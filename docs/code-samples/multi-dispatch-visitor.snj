/*
# Multiple dispatch emulated with the Visitor pattern
*/


/*
## Non Extensible `encounter`
*/


module pets


def Cat(data name: String)
def Dog(data name: String)


def #usual-pet {
    has (Self).name -> String
    has (Self).meets-usual(other: #usual-pet) -> String
    has (Self).visit-cat(other: Cat) -> String
    has (Self).visit-bird(other: Cat) -> String
}


def #usual-pet for Cat, Dog


def (Cat).meets-usual(other: #usual-pet-visitor) -> String {
    other.visit-cat(self)
}


def (Dog).meets-usual(other: #usual-pet-visitor) -> String {
    other.visit-dog(self)
}


def (Cat).visit-cat(other: Cat) -> String { "slinks" }
def (Cat).visit-dog(other: Dog) -> String { "hisses" }
def (Dog).visit-cat(other: Cat) -> String { "chases" }
def (Dog).visit-dog(other: Dog) -> String { "sniffs" }


def encounter-usual(a: A, b: B) -> String
    forall A #usual-pet, B #usual-pet
{
    let verb = a.meets-usual(b)
    "{a.name} meets {b.name} and {verb}"
}


/*****/


module exotic-pets


def Bird(def name: String)


def #usual-pet for Bird


def (Bird).visit-cat(other: Cat) -> String { "chirps" }
def (Bird).visit-dog(other: Dog) -> String { "chirps" }


def #exotic-pet {
    has #usual-pet
    has (Self).meets-exotic(other: #exotic-pet) -> String
    has (Self).visit-bird(other: #exotic-pet) -> String
}

def #exotic-pet for Cat, Dog, Bird

def (Cat).meets-exotic(other: #exotic-visitor) -> String {
    other.visit-cat(self)
}

def (Dog).meets-exotic(other: #exotic-visitor) -> String {
    other.visit-dog(self)
}

def (Bird).meets-exotic(other: #exotic-visitor) -> String {
    other.visit-bird(self)
}

def #exotic-visitor {
    has #pet-visitor
    has (Self).visit-bird(other: Bird) -> String
}

def #exotic-visitor for Cat, Dog, Bird

def (Cat).visit-bird(other: Bird) -> String { "hunts" }
def (Dog).visit-bird(other: Bird) -> String { "barks" }
def (Bird).visit-bird(other: Bird) -> String { "chirps" }


def encounter-exotic(a: A, b: B) -> String
    forall A #exotic-pet, B #exotic-pet
{
    let verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"
}


/*
## Extensible Encounter #######################################################
*/


module pets


def Cat[V](data name: String)
def Dog[V](data name: String)


def #pet {
    has (Self[V]).name -> String
    has (Self[V]).meets(other: V.Pet) -> String
        forall V #visitor
}


def #visitor {
    has Self.Pet #pet
    has Self.visit(a: Self.Pet, b: Self.Pet) -> String
}


def Visitor
def #visitor for Visitor
def Visitor.Pet = Cat[Visitor] | Dog[Visitor]
def Visitor.visit(a: Visitor.Pet, b: Visitor.Pet) -> String {
    match a, b {
        case Cat, Cat => "slinks"
        case Cat, Dog => "hisses"
        case Dog, Cat => "chases"
        case Dog, Dog => "sniffs"
    }
}


def encounter(a: P[V], b: P[V]) -> String
    forall P #pet, V #visitor, V.Pet == P[V]
{
    let verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"
}


/*****/


module exotic-pets


def Bird[V](def name: String)


def #pet for Bird


def Exotic-Visitor
def #visitor for Exotic-Visitor
def Exotic-Visitor.Pet = Cat[Exotic-Visitor] | Dog[Exotic-Visitor] | Bird[Exotic-Visitor]
def Exotic-Visitor.visit(a: Exotic-Visitor.Pet, b: Exotic-Visitor.Pet) -> String {
    match a, b {
        case Cat, Bird => "hunts"
        case Dog, Bird => "barks"
        case Bird, Cat => "chirps"
        case Bird, Dog => "chirps"
        case Bird, Bird => "chirps"
        case a': Visitor.Pet, b': Visitor.Pet =>
            Visitor.visit(a', b')
    }
}


## With Single Dispatch and Open Unions #######################################


module pets


def Pet = union {
    case Cat { data name: String }
    case Dog { data name: String }
    case ...
}


def #meeter = trait {
    has (Self).meets(other: Pet) -> String
}
def #cat-visitor = trait {
    has (Self).visit-cat(other: Cat)
}
def #dog-visitor = trait {
    has (Self).visit-dog(other: Dog)
}


def #meeter for Pet


def (Cat).meets(other: Pet) -> String {
    other.visit-cat(self)
}


def (Dog).meets(other: Pet) -> String {
    other.visit-dog(self)
}


def #cat-visitor for Pet
def #dog-visitor for Pet


def (Cat).visit-cat(other: Cat) -> String { "slinks" }
def (Cat).visit-dog(other: Dog) -> String { "hisses" }
def (Dog).visit-cat(other: Cat) -> String { "chases" }
def (Dog).visit-dog(other: Dog) -> String { "sniffs" }


def encounter(a: Pet, b: Pet) -> String {
    let verb = a.meets(b)
    "{a.name} meets {b.name} and {verb}"
}


-------------------------------------------------------------------------------


module exotic-pets

use pets (Pet, Cat, Dog)


def Pet = union {
    ...pets::Pet
    case Bird { def name: String }
    case ...
}


def (Bird).meets(other: Pet) -> String {
    other.visit-bird(self)
}


def (Bird).visit-cat(other: Cat) -> String { "chirps" }
def (Bird).visit-dog(other: Dog) -> String { "chirps" }


def #bird-visitor = trait {
    has (Self).visit-bird(other: Bird) -> String
}


def #bird-visitor for Pet


def (Cat).visit-bird(other: Bird) -> String { "hunts" }
def (Dog).visit-bird(other: Bird) -> String { "barks" }
def (Bird).visit-bird(other: Bird) -> String { "chirps" }
