-- Single dispatch and structural unions --------------------------------------


module /std/ops


def #eq =
	has (self: Self) == (other: Self) -> Bool


module basic


def Foo = def struct
def Bar = def struct

def Basic =
	| Foo
	| Bar


def #eq for Basic


def (self: Basic) == (other: Basic) -> Bool =
	match (self, other)
	case (Foo, Foo) then True
	case (Bar, Bar) then True
	case (Foo, Bar) then False
	else (Bar, Foo) then False


<< Problems with pure structural unions:

- while `Foo` and `Bar` have the `==` method, they do no implement the `#eq`
  trait (only `Basic` does).
- it's not extensible, since `Foo` and `Bar` already have the `==` methode, no
  other unions containing them can implement the trait. >>


-- Single dispatch and nominal unions -----------------------------------------


module /std/ops


def #eq =
	has (self: Self) == (other: Self) -> Bool


module basic


def Foo = def struct
def Bar = def struct


def Basic =
	enum {
		Foo,
		Bar,
	}


def #eq for Foo
def (self: Foo) == (other: Foo) -> True = True


def #eq for Bar
def (self: Bar) == (other: Bar) -> True = True


def #eq for Basic
def (self: Basic) == (other: Basic) -> Bool =
	match (self, other)
	case (Basic.Foo, Basic.Foo) then True
	case (Basic.Bar, Basic.Bar) then True
	case (Basic.Foo, Basic.Bar) then False
	else (Basic.Bar, Basic.Foo) then False


module extended


use Basic { Foo, Bar }


def Extended =
	enum {
		Foo,
		Bar,
		Baz,
	}


def #eq for Extended
def (self: Extended) == (other: Extended) -> Bool =
	match (self, other)
	case (Extended.Foo, Extended.Foo) then True
	case (Extended.Bar, Extended.Bar) then True
	case (Extended.Baz, Extended.Baz) then True
	else ? then False


-- Single dispatch with unknown type ------------------------------------------


module /std


def #eq =
	has Self.Eq-RHS: Type
	has (self: Self) == (other: Self.Eq-RHS) -> Bool


def Unknown -- (union of all types, i.e. the top type)


module basic


use #eq, Unknown from /std


def Basic =
	| Foo
	| Bar


def #eq for Basic


def #eq for Foo
def Foo.Eq-RHS = Unknown
def (self: Foo) == (other: Unknown) -> Bool =
	match (self, other)
	case (Foo, Foo) then True
	else ? then False


def #eq for Bar
def Bar.Eq-RHS = Unknown
def (self: Bar) == (other: Unknown) -> Bool =
	match (self, other)
	case (Bar, Bar) then True
	else ? then False


module extended
use #eq, Unknown from /std
use Basic, Foo, Bar from basic


def Extended = Basic | Baz
def Baz = struct


def #eq for Extended


def #eq for Baz
def Baz.Eq-RHS = Unknown
def (self: Baz) == (other: Unknown) -> Bool =
	match (self, other)
	case (Baz, Baz) then True
	else ? then False


---- Dispatch on tuples -------------------------------------------------------


module std


def #eq =
	has (self: Self) == (other: Self) -> Bool


module basic


def First = struct
def Second = struct
def Basic =
	| First
	| Second


def #eq for First
def (self: (First, First)).equals -> Bool = True


def #eq for Second
def (self: (Second, Second)).equals -> Bool = True


def #eq for Basic
def (self: (Basic, Basic)).equals -> Bool
def (self: (First, Second)).equals -> Bool = False
def (self: (Second, First)).equals -> Bool = False


-- Extension --


module extended
use Basic, First, Second from basic


def Third = struct
def Extended =
	| First
	| Second
	| Third


def #eq for Third
def (self: (Third, Third)).equals -> Bool = True


def #eq for Extended
def (self: (Extended, Extended)).equals -> Bool
def (self: (Third, First)).equals -> Bool = False
def (self: (Third, Second)).equals -> Bool = False
def (self: (First, Third)).equals -> Bool = False
def (self: (Second, Third)).equals -> Bool = False


---- Double Dispatch ----------------------------------------------------------


module std


def #eq =
	has (self: Self) == (other: Self) -> Bool


module basic


def First = struct
def Second = struct
def Basic =
	| First
	| Second


def #eq for First
def (self: First) == (other: First) -> Bool = True


def #eq for Second
def (self: Second) == (other: Second) -> Bool = True


def #eq for Basic
def (self: Basic) == (other: Basic) -> Bool
def (self: First) == (other: Second) -> Bool = False
def (self: Second) == (other: First) -> Bool = False


-- Extension --


module extended
use Basic, First, Second from basic


def Third = struct
def Extended =
	| First
	| Second
	| Third


def #eq for Third
def (self: Third) == (other: Third) -> Bool = True


def #eq for Extended
def (self: Extended) == (other: Extended) -> Bool
def (self: Third) == (other: First) -> Bool = False
def (self: Third) == (other: Second) -> Bool = False
def (self: First) == (other: Third) -> Bool = False
def (self: Second) == (other: Third) -> Bool = False
