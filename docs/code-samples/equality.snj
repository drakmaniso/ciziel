---- Single Dispatch ----------------------------------------------------------


module /std/ops
public


trait #eq {
	type Self.Eq-RHS = Self
	fun (Self) == (other: Self.Eq-RHS) -> Bool
}


module basic
public


type Basic =
	| Foo
	| Bar
	|;


implement #eq for Basic


fun (Basic) == (other: Basic) -> Bool =
	match (self, other)
		| (Foo, Foo) -> True
		| (Bar, Bar) -> True
		| (Foo, Bar) -> False
		| (Bar, Foo) -> False
		|;


/*
Question: do `Foo` and `Bar` implement `#eq`? This would require trait
conformance to accept widening of arguments.

Note: this approach is not extensible, since the equality trait needs a
concrete type.
*/


// Single Dispatch with Unknown type //////////////////////////////////////////


module /std
public


trait #eq {
	type Self.Eq-RHS = Self
	fun (Self) == (other: Self.Eq-RHS) -> Bool
}


type Unknown -- (union of all types)


module basic
use #eq, Unknown from /std
public


type Basic =
	| Foo
	| Bar
	|;


extend Basic as #eq


extend Foo as #eq
alias Foo.Eq-RHS = Unknown
fun (Foo) == (other: Unknown) -> Bool =
	match (self, other)
		| (Foo, Foo) -> True
		| _ -> False
		|;


tag Bar #eq
alias Bar.Eq-RHS = Unknown
fun (Bar) == (other: Unknown) -> Bool =
	match (self, other)
		| (Bar, Bar) -> True
		| _ -> False
		|;

module extended
use #eq, Unknown from /std
use Basic, Foo, Bar from basic
public


type Extended = Basic | Baz
struct Baz


extend Extended as #eq


extend Baz as #eq
alias Baz.Eq-RHS = Unknown
fun (Baz) == (other: Unknown) -> Bool =
	match (self, other)
		| (Baz, Baz) -> True
		| _ -> False
		|;


---- Double Dispatch ----------------------------------------------------------


module std
public


trait #eq {
	fun (Self) == (other: Self) -> Bool
}


module basic
public


type Basic =
	| First
	| Second
	|;


extend Basic as #eq
extend First as #eq
extend Second as #eq
fun (First) == (other: Basic) -> Bool = other is First
fun (First) == (other: Basic) -> Bool = other is Basic


-- Extension --


module extended
use Basic, First, Second from basic
public


type Extended =
	| as Basic
	| Third
	|;


extend Extended as #eq
extend Third as #eq
fun (Basic) == (other: Third) -> Bool = False
fun (Third) == (other: Extended) -> Bool = other is Third


-- Single Dispatch ------------------------------------------------------------


module basic


type Basic =
	| Foo
	| Bar
	|;


trait #basic {
	fun (Self).as-basic -> Option[Basic]
}


extend Basic as #basic
fun (Foo).as-basic = Some(self)
fun (Bar).as-basic = Some(self)


extend Basic as #eq


alias Foo.Eq-RHS = A #basic
forall A #basic
fun (Foo) == (other: A) -> Bool =
    match other.as-basic
		| Some(Foo) -> True
		| Some(Bar) -> False
		| None -> False
		|;


alias Bar.Eq-RHS = A #basic
forall A #basic
fun (Bar) == (other: A) -> Bool =
    match other.as-basic
		| Some(Foo) -> False
		| Some(Bar) -> True
		| None -> False
		|;


-- Extension --


module extended
use Basic, Foo, Bar, #basic from basic
public


type Extended =
	| as Basic
	| Baz
	|;


extend Extended as #basic
alias Extended.Eq-RHS = A #basic
fun (Baz).as-basic = None


tag #extended {
	fun (Self).as-extended -> Option[Extended]
}


extend Extended #extended
fun (Foo).as-extended = Some(self)
fun (Bar).as-extended = Some(self)
fun (Baz).as-extended = Some(self)


tag Extended #eq


forall A #extended
fun (Baz) == (other: A) -> Bool =
    match other.as-extended
		| Foo -> False
		| Bar -> False
		| Baz -> True
		|;
