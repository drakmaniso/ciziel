func (Node[T]).foo(a: Int) -> Int = ...

const Node.foo = forall T: Type lambda(self: Node[T], a: Int) -> Int => ...

---

func Node[T].foo(a: T) -> Int = ...

const Node.foo = forall T: Type lambda(a: T) -> Int => ...

---

func Node[T].foo(a: Int) -> T = ...

const Node.foo = forall T: Type lambda(a: Int) -> T => ...


-----------------------------


func (Node[T]).foo(a: Int) -> Int = ...

forall T: Type
const Node[T].foo = lambda(self: Node[T], a: Int) -> Int => ...

---

func Node[T].foo(a: T) -> Int = ...

forall T: Type
const Node[T].foo = lambda(a: T) -> Int => ...

---

const Node[T].foo: T = ...

forall T: Type
const Node[T].foo: T = ...