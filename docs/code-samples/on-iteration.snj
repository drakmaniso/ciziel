-- From https://www.informit.com/articles/printerfriendly/1407357


trait #one-pass-range {
	type Self.Item #type
	fun (Self).front -> Self.Item?
	fun (Self).pop-front -> Self
}


forall R #one-pass-range
fun find(range: R, value: R.Item) -> R =
    if range.front is Ok(value) then
		range
    else
		find(range.pop-front, value)
	end


trait #writable-range {
	type Self.Item #type
	fun (Self).replace-front(item: Self.Item) -> Self?
}


forall A #one-pass-range,
	B #one-pass-range #writable-range,
	A.Item == B.Item
fun copy(source: A, target: B) -> (A, B) =
	case source.front
		of Ok(item) then
			case target.replace-front(item)
				of Ok(target') then
					copy(source.pop-front, target'.pop-front)
				of _ then
					(source, target)
			end
		of _ then
			(source, target)
	end


forall A #one-pass-range,
	B #one-pass-range #writable-range,
	A.Item == B.Item
fun copy(source: A, target: B) -> (A, B) =
	item ?= source.front
		?? _ => (source, target)
	target' ?= target.replace-front(item)
		?? _ => (source, target)
	copy(source.pop-front, target.pop-front)


trait #forward-range {
    tag Self #one-pass-range
    fun (Self).save -> Self
}


trait #double-ended-range {
    tag Self #forward-range
    fun (Self).back -> Self.Item?
    fun (Self).pop-back -> Self
}


trait #random-access-range {
    tag Self #forward-range
    fun (Self).at(index: Size) -> Self.Item?
    fun (Self).slice(from: Size, to: Size) -> Self
}


trait #length {
    fun (Self).length -> Size
}


trait #is-infinite {
    val Self.is-infinite: Bool
}
