-- From https://www.informit.com/articles/printerfriendly/1407357


def #one-pass-range =
	has Self.Item #type
	has (r: Self).front -> Option[Self.Item]
	has (r: Self).pop-front -> Self


given R #one-pass-range
def find(range: R, value: R.Item) -> R =
    if range.front is Ok(value) then
		range
    else
		find(range.pop-front, value)


def #writable-range =
	has Self.Item #type
	has (r: Self).replace-front(item: Self.Item) -> Option[Self]


given A #one-pass-range,
	B #one-pass-range #writable-range,
	A.Item == B.Item
def copy(source: A, target: B) -> (A, B) =
	match source.front
	when Ok(item) then
		match target.replace-front(item)
		when Ok(target') then
			copy(source.pop-front, target'.pop-front)
		else
			(source, target)
	else
		(source, target)


given A #one-pass-range,
	B #one-pass-range #writable-range,
	A.Item == B.Item
def copy(source: A, target: B) -> (A, B) =
	let? item = source.front
		.or_else(_ => (source, target))
	let? target' = target.replace-front(item)
		.or_else(_ => (source, target))
	copy(source.pop-front, target.pop-front)


def #forward-range =
	has Self #one-pass-range
	has (r: Self).save -> Self


def #double-ended-range =
	has Self #forward-range
	has (r: Self).back -> Self.Item?
	has (r: Self).pop-back -> Self


def #random-access-range =
	has Self #forward-range
	has (r: Self).at(index: Size) -> Self.Item?
	has (r: Self).slice(from: Size, to: Size) -> Self


def #length =
	has (r: Self).length -> Size


def #is-infinite =
	has Self.is-infinite: Bool
