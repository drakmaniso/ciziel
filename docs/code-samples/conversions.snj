-- With Keyword Overloading ---------------------------------------------------


module /std
public


trait #to[A] {
	fun (Self) to A -> A
}


module vectors
public


type Cartesian(x: data Float64 y: data Float64)
type Polar(radius: data Float64 angle: data Float64)


extend Polar as #to[Cartesian]
fun (Polar) to Cartesian -> Cartesian =
    Cartesian {
        x = self.radius * math::cos(self.angle),
        y = self.radius * math::sin(self.angle),
	}


extend Cartesian as #to[Polar]
fun (Cartesian) to Polar -> Polar =
    Polar {
        radius = math::sqrt((self.x ^ 2) + (self.y ^ 2)),
        angle = math::atan2(self.y, self.x),
	}


module usage
use /std (#to, #add)
public


forall A #to[B],  B #add
fun sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + (value to B)
	)


-- With Single Dispatch Only --------------------------------------------------


module vectors
public


type Cartesian(x: data Float64, y: data Float64)
type Polar(radius: data Float64, angle: data Float64)


fun (Polar).to-Cartesian -> Cartesian =
    Cartesian {
        x = self.radius * math::cos(self.angle),
        y = self.radius * math::sin(self.angle),
	}


fun (Cartesian).to-Polar -> Polar =
    Polar {
        radius = math::sqrt((self.x ^ 2) + (self.y ^ 2)),
        angle = math::atan2(self.y, self.x),
	}


module usage
use /std(#add)
public


forall B #add
fun sum(values: Array[A], to-B: A -> B) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + to-B(value)
	)


-- With Double-Dispatch -------------------------------------------------------


module std
public


trait #from[A] {
	fun Self <from> (other: A) -> Self
}


module vectors
public


type Cartesian(x: data Float64 y: data Float64)
type Polar(radius: data Float64 angle: data Float64)


extend Cartesian as #from[Polar]


fun Cartesian <from> (other: Polar) -> Cartesian =
    Cartesian {
        x = other.radius * math::cos(other.angle),
        y = other.radius * math::sin(other.angle),
	}


extend Polar as #from[Cartesian]


fun Polar <from> (other: Cartesian) -> Polar =
    Polar {
        radius = math::sqrt((other.x ^ 2) + (other.y ^ 2))
        angle = math::atan2(other.y, other.x)
	}


module usage
use /std(#from, #add)
public


forall B #from[A] #add
fun sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) =>
			accum + (B <from> value)
	)


-- Magic Constructors ---------------------------------------------------------


module std
public


trait #from[A] {
	fun Self(A) -> Self
}


module vectors
public


type Cartesian(x: data Float64 y: data Float64)
type Polar(radius: data Float64 angle: data Float64)


extend Cartesian as #from[Polar]
fun Cartesian(polar: Polar) -> Cartesian =
    Cartesian {
        x = polar.radius * math::cos(polar.angle),
        y = polar.radius * math::sin(polar.angle),
	}


extend Polar as #from[Cartesian]
fun Polar(cartesian: Cartesian) -> Polar =
    Polar {
        radius = math::sqrt((cartesian.x ^ 2) + (cartesian.y ^ 2)),
        angle = math::atan2(cartesian.y, cartesian.x),
	}


module usage
use /std(#from, #add)
public


forall B #from[A] #add
fun sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + (B <from> value)
	)
