-- With Type Operators --------------------------------------------------------


module std


def #to[A] =
	has (Self) to A -> A


module vectors


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def #to[Cartesian] for Polar


def (p: Polar) to Cartesian -> Cartesian =
	Cartesian {
		x = p.radius * math::cos(p.angle),
		y = p.radius * math::sin(p.angle),
	}


def #to[Polar] for Cartesian


def (c: Cartesian) to Polar -> Polar =
	Polar {
		radius = math::sqrt((c.x ^ 2) + (c.y ^ 2)),
		angle = math::atan2(c.y, c.x),
	}


module usage


use std { #to, #add }


given A: #to[B],  B: #add
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + (value to B)
	)


-- With Keyword Overloading ---------------------------------------------------


module std


def #to[A] =
	has (Self) to A -> A


module vectors


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def #to[Cartesian] for Polar


def (p: Polar) to Cartesian -> Cartesian =
	Cartesian {
		x = p.radius * math::cos(p.angle),
		y = p.radius * math::sin(p.angle),
	}


def #to[Polar] for Cartesian


def (c: Cartesian) to Polar -> Polar =
	Polar {
		radius = math::sqrt((c.x ^ 2) + (c.y ^ 2)),
		angle = math::atan2(c.y, c.x),
	}


module usage


use std { #to, #add }


given A: #to[B],  B: #add
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + (value to B)
	)


-- With Single Dispatch Only --------------------------------------------------


module vectors


def Cartesian = struct(x: Float64, y: Float64)


def Polar = struct(radius: Float64, angle Float64)


def (p: Polar).to-Cartesian -> Cartesian =
	Cartesian {
		x = p.radius * math::cos(p.angle),
		y = p.radius * math::sin(p.angle),
	}


def (c: Cartesian).to-Polar -> Polar =
	Polar {
		radius = math::sqrt((c.x ^ 2) + (c.y ^ 2)),
		angle = math::atan2(c.y, c.x),
	}


module usage


use std { #add }


given B: #add
let sum(values: Array[A], to-B: A -> B) -> B =
	values.fold(
		B.zero,
		(accum, value) -> accum + to-B(value),
	)


-- With Double-Dispatch -------------------------------------------------------


module std


def #from[A] =
	has Self <from> (other: A) -> Self


module vectors


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def #from[Polar] for Cartesian


def Cartesian <from> (other: Polar) -> Cartesian =
	Cartesian {
		x = other.radius * math::cos(other.angle),
		y = other.radius * math::sin(other.angle),
	}


def #from[Cartesian] for Polar


def Polar <from> (other: Cartesian) -> Polar =
	Polar {
		radius = math::sqrt((other.x ^ 2) + (other.y ^ 2)),
		angle = math::atan2(other.y, other.x),
	}


module usage


use std { #from, #add }


given B: #from[A] #add
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) ->
			accum + (B <from> value),
	)


-- Magic Constructors ---------------------------------------------------------


module std


def #from[A] =
	has Self(A) -> Self


module vectors


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def #from[Polar] for Cartesian


def Cartesian(polar: Polar) -> Cartesian =
	Cartesian {
		x = polar.radius * math::cos(polar.angle),
		y = polar.radius * math::sin(polar.angle),
	}


def #from[Cartesian] for Polar


def Polar(cartesian: Cartesian) -> Polar =
	Polar {
		radius = math::sqrt((cartesian.x ^ 2) + (cartesian.y ^ 2)),
		angle = math::atan2(cartesian.y, cartesian.x),
	}


module usage


use std { #from, #add }


given B #from[A] #add
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) -> accum + (B <from> value),
	)


-- Magic Names ----------------------------------------------------------------


module std


def #to[A] =
	has (Self).to-A -> A


module vectors


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def #to[Cartesian] for Polar


def (p: Polar).to-Cartesian -> Cartesian =
	Cartesian {
		x = p.radius * math::cos(p.angle),
		y = p.radius * math::sin(p.angle),
	}


def #to[Polar] for Cartesian


def (c: Cartesian).to-Polar -> Polar =
	Polar {
		radius = math::sqrt((c.x ^ 2) + (c.y ^ 2)),
		angle = math::atan2(c.y, self.x),
	}


module usage


use std { #to, #add }


given A #to[B],  B #add
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + (value.to-B)
	)

---

module std


def #from[A] =
	has Self.from(value: B)


def Cartesian = struct(x: Float64 y: Float64)


def Polar = struct(radius: Float64 angle: Float64)


def Cartesian as #from[Polar]


def Cartesian.from(p: Polar) -> Cartesian =
	Cartesian {
		x = p.radius * math::cos(p.angle),
		y = p.radius * math::sin(p.angle),
	}


def Polar as #from[Cartesian]


def Polar.from(c: Cartesian) -> Polar =
	Polar {
		radius = math::sqrt((c.x ^ 2) + (c.y ^ 2)),
		angle = math::atan2(c.y, self.x),
	}


module usage


use std { #to, #add }


given A,  B #add #from[A]
let sum(values: Array[A]) -> B =
	values.fold(
		B.zero,
		(accum, value) => accum + B.from(value)
	)
