<<
# Covariance and Contravariance

Adapted from a [blog article]
(https://quuxplusone.github.io/blog/2019/01/20/covariance-and-contravariance/).
>>


-- Unions ---------------------------------------------------------------------


let Cat = record
let Horse = record
let Animal = Cat | Horse


let (a: Animal).make-noise -> () &io =
	match a
	case Cat then
		print("meow!")
	else Horse then
		print("neigh!")


<< Breeders: covariance of return types >>


let Breeder-Of-Cats = record
let Breeder-Of-Horses = record
let Breeder = Breeder-Of-Cats | Breeder-Of-Horses


let (b: Breeder).produce -> Animal


let (b: Breeder-Of-Cats).produce -> Cat =
    Cat


let (b: Breeder-Of-Horses).produce -> Horse =
    Horse


<< Doctors: contravariance of argument types >>


let Doctor-For-Cats = record
let Doctor-For-Horses = record
let Doctor = Doctor-For-Cats | Doctor-For-Horses


let (d: Doctor-For-Cats).treat(patient: Cat) -> () &io =
    print("All done.")


let (d: Doctor-For-Horses).treat(patient: Horse) -> () &io =
    print("All done.")



<<
With unions, contravariance does not work: `Doctor` has no `treat` method,
because it cannot be dispatched!

```
dispatch (Doctor).treat(patient: ???) -> () &io
```
>>


let produce-and-treat(breeder: Breeder, doctor: Doctor) -> () &io =
	let animal = breeder.produce
	do animal.make-noise
	in
	match animal
	case c: Cat then
		match doctor
		case d: Doctor-For-Cats then
			d.treat(c)
		else ? then
			panic("This doctor cannot treat a cat!")

	else h: Horse then
		match doctor
		case d: Doctor-For-Horses then
			d.treat(h)
		else ? then
			panic("This doctor cannot treat a horse!")


-- Traits ---------------------------------------------------------------------


<< With traits, both covariance and contravariance works. >>


let Cat = record
let Horse = record
let Animal = Cat | Horse


let #animal =
	has (a: Self).make-noise -> () &io


let #animal for Animal


let (a: Animal).make-noise -> () &io =
	match a
	case Cat then
		print("meow!")
	else Horse then
		print("neigh!")


<< Breeders: covariance >>


let Breeder-Of-Cats = record
let Breeder-Of-Horses = record
let Breeder = Breeder-Of-Cats | Breeder-Of-Horses


let #breeder =
	has Self.Product: Type
	has (b: Self).produce -> Self.Product


let #breeder for Breeder-Of-Cats
let Breeder-Of-Cats.Product = Cat
let (b: Breeder-Of-Cats).produce -> Cat =
    Cat


let #breeder for Breeder-Of-Horses
let Breeder-Of-Horses.Animal = Horse
let (b: Breeder-Of-Horses).produce -> Horse =
    Horse


<< Doctors: contravariance >>


let Doctor-For-Cats = record
let Doctor-For-Horses = record
let Doctor = Doctor-For-Cats | Doctor-For-Horses


let #doctor =
	has Self.Patient
	has (d: Self).treat(patient: Self.Patient) -> () &io


let #doctor for Doctor-Of-Cats
let Doctor-Of-Cats.Patient = Cat
let (d: Doctor-Of-Cats).treat(patient: Cat) -> () &io =
    print("All done.")


let #doctor for Doctor-Of-Horses
let Doctor-Of-Horses.Patient = Horse
let (d: Doctor-Of-Horses).treat(patient: Horse) -> () &io =
    print("All done.")


given
	B: #breeder,
	D: #doctor,
	B.Product == D.Patient,
let produce-and-treat(breeder: B, doctor: D) -> () &io =
	let animal = breeder.produce
	do animal.make-noise
	in
	doctor.treat(animal)
