<<
# Covariance and Contravariance

Adapted from a [blog article]
(https://quuxplusone.github.io/blog/2019/01/20/covariance-and-contravariance/).
>>


-- Unions ---------------------------------------------------------------------


<< With unions, only covariance works. >>


struct Cat
fun (Cat).make-noise -> Void &io =
    print("meow!")


struct Horse
fun (Horse).make-noise -> Void &io =
    print("neigh!")


type Animal = Cat | Horse
auto (Animal).make-noise -> Void &io


<< Breeders: covariance >>


struct Cat-Breeder
fun (Cat-Breeder).produce -> Cat =
    Cat


struct Horse-Breeder
fun (Horse-Breeder).produce -> Horse =
    Horse


type Animal-Breeder = Cat-Breeder | Horse-Breeder
auto (Animal-Breeder).produce -> Animal


<< Doctors: contravariance >>


struct Cat-Doctor
fun (Cat-Doctor).treat(patient: Cat) -> Void &io =
    print("All done.")


struct Horse-Doctor
fun (Horse-Doctor).treat(patient: Horse) -> Void &io =
    print("All done.")


type Animal-Doctor = Cat-Doctor | Horse-Doctor
<<
`Animal-Doctor` has no `treat` method, because it cannot be dispatched!

    ```
    (Animal-Doctor).treat(self, patient: ???) -> Void &io = auto
    ```
>>


fun produce-and-treat(breeder: Animal-Breeder, doctor: Animal-Doctor) -> Void &io =
	do
		animal = breeder.produce
		animal.make-noise

		case (animal, doctor)
			of (c: Cat, d: Cat-Doctor) then
				d.treat(c)
			of (h: Horse, d: Horse-Doctor) then
				d.treat(h)
			of (Cat, Horse-Doctor) then
				panic("This doctor cannot treat a cat!")
			of (Horse, Cat-Doctor) then
				panic("This doctor cannot treat a horse!")
		end
	end


-- Traits ---------------------------------------------------------------------


<< With traits, both covariance and contravariance works. >>


trait #animal {
	fun (Self).make-noise -> Void &io
}


struct Cat
tag Cat #animal
fun (Cat).make-noise -> Void &io =
    print("meow!")


struct Horse
tag Horse #animal
fun (Horse).make-noise -> Void &io =
    print("neigh!")


-- Breeders: covariance


trait #animal-breeder {
	Self.Animal
	(Self).produce -> Self.Animal
}


struct Cat-Breeder
tag Cat-Breeder #animal-breeder
type Cat-Breeder.Animal = Cat
fun (Cat-Breeder).produce -> Cat =
    Cat


struct Horse-Breeder
tag Horse-Breeder #animal-breeder
type Horse-Breeder.Animal = Horse
fun (Horse-Breeder).produce -> Horse =
    Horse


-- Doctors: contravariance


trait #animal-doctor {
	type Self.Animal
	fun (Self).treat(patient: Self.Animal) -> Void &io
}


struct Cat-Doctor
tag Cat-Doctor #animal-doctor
type Cat-Doctor.Animal = Cat
fun (Cat-Doctor).treat(patient: Cat) -> Void &io =
    print("All done.")


struct Horse-Doctor
tag Horse-Doctor #animal-doctor
type Horse-Doctor.Animal = Horse
fun (Horse-Doctor).treat(patient: Horse) -> Void &io =
    print("All done.")


forall B #animal-breeder,
	D #animal-doctor,
	B.Animal == D.Animal
fun produce-and-treat(breeder: B, doctor: D) -> Void &io =
	do
		animal = breeder.produce
		animal.make-noise

		doctor.treat(animal)
	end
