/*
# Covariance and Contravariance

Adapted from a [blog article]
(https://quuxplusone.github.io/blog/2019/01/20/covariance-and-contravariance/).
*/


-- Unions ---------------------------------------------------------------------


type Animal =
	| Cat
	| Horse
	|;


fun (Animal).make-noise -> () &io =
	match self
		| Animal.Cat ->
			print("meow!")
		| Animal.Horse ->
			print("neigh!")
		|;


/* Breeders: covariance of return types */


type Breeder =
	| For-Cats
	| For-Horses
	|;


dispatch (Animal-Breeder).produce -> Animal


fun (Breeder.Of-Cats).produce -> Animal.Cat =
    Animal.Cat


fun (Breeder.Of-Horses).produce -> Animal.Horse =
    Animal.Horse


/* Doctors: contravariance of argument types */


type Doctor =
	| For-Cats
	| For-Horses
	|;


fun (Doctor.For-Cats).treat(patient: Animal.Cat) -> () &io =
    print("All done.")


fun (Doctor.For-Horses).treat(patient: Animal.Horse) -> () &io =
    print("All done.")



/*
With unions, only covariance works: `Doctor` has no `treat` method, because it
cannot be dispatched!

    ```
    dispatch (Doctor).treat(patient: ???) -> () &io
    ```
*/


fun produce-and-treat(breeder: Breeder, doctor: Doctor) -> () &io =
	animal = breeder.produce
	!animal.make-noise

	match animal
		| c: Animal.Cat ->
			match doctor
				| d: Doctor.For-Cats -> d.treat(c)
				| _ -> panic("This doctor cannot treat a cat!")
				|;
		| h: Animal.Horse ->
			match doctor
				| d: Doctor.For-Horses -> d.treat(h)
				| _ -> panic("This doctor cannot treat a horse!")
				|;
		|;



-- Traits ---------------------------------------------------------------------


/* With traits, both covariance and contravariance works. */


type Animal =
	| Cat
	| Horse
	|;


trait #animal {
	fun (Self).make-noise -> () &io
}


extend Animal as #animal
fun (Animal).make-noise -> () &io =
	match self
		| Animal.Cat -> print("meow!")
		| Animal.Horse -> print("neigh!")
		|;


/* Breeders: covariance */


type Breeder =
	| Of-Cats
	| Of-Horses
	|;


trait #breeder {
	Self.Product
	(Self).produce -> Self.Product
}


extend Breeder.Of-Cats as #breeder
alias Breeder.Of-Cats.Product = Animal.Cat
fun (Breeder.Of-Cats).produce -> Animal.Cat =
    Animal.Cat


extend Breeder.Of-Horses as #breeder
alias Breeder.Of-Horses.Animal = Animal.Horse
fun (Breeder.Of-Horses).produce -> Animal.Horse =
    Horse


/* Doctors: contravariance */


trait #doctor {
	type Self.Patient
	fun (Self).treat(patient: Self.Patient) -> () &io
}


extend Doctor.Of-Cats as #doctor
type Doctor.Of-Cats.Patient = Animal.Cat
fun (Doctor.Of-Cats).treat(patient: Animal.Cat) -> () &io =
    print("All done.")


tag Doctor.Of-Horses as #doctor
type Doctor.Of-Horses.Patient = Animal.Horse
fun (Doctor.Of-Horses).treat(patient: Animal.Horse) -> () &io =
    print("All done.")


forall B #breeder,
	D #doctor,
	B.Patient == D.Patient
fun produce-and-treat(breeder: B, doctor: D) -> () &io =
	animal = breeder.produce
	!animal.make-noise
	!doctor.treat(animal)
	()
