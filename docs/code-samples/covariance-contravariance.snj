<<
# Covariance and Contravariance

Adapted from a [blog article]
(https://quuxplusone.github.io/blog/2019/01/20/covariance-and-contravariance/).
>>


-- Unions ---------------------------------------------------------------------


<< With unions, only covariance works. >>


Cat = struct
(Cat).make-noise -> Nil &io =
    io.print("meow!")


Horse = struct
(Horse).make-noise -> Nil &io =
    io.print("neigh!")


Animal = Cat | Horse
(Animal).make-noise -> Nil &io =
	auto


<< Breeders: covariance >>


Cat-Breeder = struct
(Cat-Breeder).produce -> Cat =
    Cat


Horse-Breeder = struct
(Horse-Breeder).produce -> Horse =
    Horse


Animal-Breeder = Cat-Breeder | Horse-Breeder
(Animal-Breeder).produce -> Animal = auto


<< Doctors: contravariance >>


Cat-Doctor = struct
(Cat-Doctor).treat(patient: Cat) -> Nil &io =
    io.print("All done.")


Horse-Doctor = struct
(Horse-Doctor).treat(patient: Horse) -> Nil &io =
    io.print("All done.")


Animal-Doctor = Cat-Doctor | Horse-Doctor
<<
`Animal-Doctor` has no `treat` method, because it cannot be dispatched!

    ```
    (Animal-Doctor).treat(self, patient: ???) -> Nil &io = auto
    ```
>>


produce-and-treat(breeder: Animal-Breeder, doctor: Animal-Doctor) -> Nil &io =
    animal = breeder.produce
    do animal.make-noise

    do case (animal, doctor)
	of (c: Cat, d: Cat-Doctor) then
		d.treat(c)
	of (h: Horse, d: Horse-Doctor) then
		d.treat(h)
	of (Cat, Horse-Doctor) then
		panic("This doctor cannot treat a cat!")
	of (Horse, Cat-Doctor) then
		panic("This doctor cannot treat a horse!")
	end

	Nil


-- Traits ---------------------------------------------------------------------


<< With traits, both covariance and contravariance works. >>


#animal =
	trait {
		(Self).make-noise -> Nil &io
	}


Cat = struct
Cat: #animal
(Cat).make-noise -> Nil &io =
    io.print("meow!")


Horse = struct
Horse: #animal
(Horse).make-noise -> Nil &io =
    io.print("neigh!")


-- Breeders: covariance


#animal-breeder =
	trait {
		Self.Animal
		(Self).produce -> Self.Animal
	}


Cat-Breeder = struct
Cat-Breeder: #animal-breeder
Cat-Breeder.Animal = Cat
(Cat-Breeder).produce -> Cat =
    Cat


Horse-Breeder = struct
Horse-Breeder: #animal-breeder
Horse-Breeder.Animal = Horse
(Horse-Breeder).produce -> Horse =
    Horse


-- Doctors: contravariance


#animal-doctor =
	trait {
		Self.Animal
		(Self).treat(patient: Self.Animal) -> Nil &io
	}


Cat-Doctor = struct
Cat-Doctor: #animal-doctor
Cat-Doctor.Animal = Cat
(Cat-Doctor).treat(patient: Cat) -> Nil &io =
    io.print("All done.")


Horse-Doctor = struct
Horse-Doctor: #animal-doctor
Horse-Doctor.Animal = Horse
(Horse-Doctor).treat(patient: Horse) -> Nil &io =
    io.print("All done.")


produce-and-treat(breeder: B, doctor: D) -> Nil &io
	forall B #animal-breeder
		and D #animal-doctor
		and B.Animal == D.Animal
	=
	do
		animal = breeder.produce
		animal.make-noise

		doctor.treat(animal)
	end
