
type Pet =
	| Cat { name: String }
	| Dog { name: String }
	|;


/* The fields that are common to all variants are automatically dispatched: */


dispatch (Pet).name -> String


/**/


type Pet-Toy =
	| Wool-Ball { color: Color }
	| Stick { length: Int }
	|;


type Pet.Typical-Toy -- Pet-Toy
type Cat.Typical-Toy = Wool-Ball
type Dog.Typical-Toy = Stick


/* The `greet` method is automatically dispatched: */


fun (Pet).greet(human: String) -> String
fun (Cat).greet(human: String) -> String = "{self.name} ignores {human}"
fun (Dog).greet(human: String) -> String = "{self.name} plays with {human}"


/* But the `play` method cannot be dispatched: */


fun (Cat).play(toy: Wool-Ball) -> String = "{self.name} plays with a ball of color {toy.color}"
fun (Dog).play(toy: Stick) -> String = "{self.name} plays with a stick of length {toy.length}"
