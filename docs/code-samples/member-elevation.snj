
def Pet = Cat | Dog
def Cat = record { name: String }
def Dog = record { name: String }


<< The fields that are common to all variants are automatically dispatched: >>


def (p: Pet).name -> String


<< >>


def Pet-Toy = Wool-Ball | Stick
def Wool-Ball = record { color: Color }
def Stick = record { length: Int }


def Pet.Typical-Toy -- Pet-Toy
def Cat.Typical-Toy = Wool-Ball
def Dog.Typical-Toy = Stick


<< The `greet` method is automatically dispatched: >>


def (p: Pet).greet(human: String) -> String
def (c: Cat).greet(human: String) -> String = "{self.name} ignores {human}"
def (d: Dog).greet(human: String) -> String = "{self.name} plays with {human}"


<< But the `play` method cannot be dispatched: >>


def (c: Cat).play(toy: Wool-Ball) -> String = "{self.name} plays with a ball of color {toy.color}"
def (d: Dog).play(toy: Stick) -> String = "{self.name} plays with a stick of length {toy.length}"
