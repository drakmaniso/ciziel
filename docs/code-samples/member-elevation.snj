struct Cat { name: String }
struct Dog { name: String }
type Pet = Cat | Dog


/* The fields that are common to all variants are automatically elevated: */


dispatch (Pet).name -> String


/**/


struct Wool-Ball { color: Color }
struct Stick { length: Int }


type Cat.Typical-Toy = Wool-Ball
type Dog.Typical-Toy = Stick
dispatch Pet.Typical-Toy -- Wool-Ball | Stick


/* The `greet` method is automatically elevated: */


fun (Cat).greet(human: String) -> String = "{self.name} ignores {human}"
fun (Dog).greet(human: String) -> String = "{self.name} plays with {human}"
dispatch (Pet).greet(human: String) -> String


/* But the `play` method cannot be elevated: */


fun (Cat).play(toy: Wool-Ball) -> String = "{self.name} plays with a ball of color {toy.color}"
fun (Dog).play(toy: Stick) -> String = "{self.name} plays with a stick of length {toy.length}"
