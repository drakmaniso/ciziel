-------------------------------------------------------------------------------
/*from:
<https://package.elm-lang.org/packages/Punie/elm-reader/latest/>
*/


type Reader[C, A](run: C -> A)


implement #monad[A] for Reader[_, A]


fun Reader[C, A].wrap(item: A) -> Reader[C, A] =
	Reader(-> item)


fun (Reader[C, A]).and-then(operation: A -> Reader[C, B]) -> Reader[C, B] =
	Reader(
		context ->
			a = self.run(context)
			new-reader = operation(a)
			new-reader.run(context)
	)


fun Reader.always(value: A) -> Reader[_, A] =
	Reader(-> value)


const Reader[C, C].ask: Reader[C, C] =
	Reader(x -> x)


fun Reader[C, A].asks(mapping: C -> A) -> Reader[C, A] =
	Reader(mapping)


fun (Reader[C, A]).change-context(change: C -> C) -> Reader[C, A] =
	Reader(ctx -> self.run(change(ctx)))


fun (Reader[C, A]).map(transform: A -> B) -> Reader[C, B] =
	Reader(ctx -> transform(self.run(ctx)))


-------------------------------------------------------------------------------
module reader-usage
use reader
public


fun main() -> () &io =
	!print(greeting("Elm").run(France))
	-- Bonjour, Elm !

	!print(greeting("Elm").run(Spain))
	-- ¡Buenos Dìas, Elm!

	!print(greeting("Elm").run(USA))
	-- Hello, Elm!

	()


local


type Country = France | Spain | USA


fun hello-text(country: Country) -> String =
	match country
		| France -> "Bonjour"
		| Spain -> "Buenos dìas"
		| USA -> "Hello"
		;


fun greet(name: String) -> Reader[Country, String] =
	Reader.asks(hello-text).and-then(
		greeting ->
			Reader(-> "{greeting} , {name}")
	)


fun exclamation(input: String) -> Reader[Country, String] =
	Reader.ask.and-then(
		country ->
			Reader(->
				match country
					| France -> "{input} !"
					| Spain -> "¡{input}!"
					| USA -> "{input}!"
					;
			)
	)


fun greeting(name: String) -> Reader[Country, String] =
	greet(name).and-then(exclamation)


-- Or, with monadic bind:


fun greet'(name: String) -> Reader[Country, String] =
	greeting ?= Reader.asks(hello-text)
	Reader(-> "{greeting}, {name}")


fun exclamation'(input: String) -> Reader[Country, String] =
	country ?= Reader.ask
	Reader(->
		match country
			| France -> "{input} !"
			| Spain -> "¡{input}!"
			| USA -> "{input}!"
			;
	)


fun greeting'(name: String) -> Reader[Country, String] =
	n ?= greet(name)
	exclamation(n)
