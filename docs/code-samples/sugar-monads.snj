---- Monadic Bind -------------------------------------------------------------


let example-1(numbers: Array[Int]) -> Option[Int] =
	let? first = numbers.at(0)
	let? second = numbers.at(1)

	Some(first + second)


let example-1-desugared(numbers: Array[Int]) -> Option[Int] =
	numbers.at(0).and-then(first =>
		numbers.at(1).and-then(second =>
			Some(first + second)
		)
	)


let example-1-desugared'(numbers: Array[Int]) -> Option[Int] =
	numbers.at(0) <and-then> first =>
		numbers.at(1) <and-then> second =>
			Some(first + second)


let My-Error =
	| None
	| Int.Parse-Error


let example-2(numbers: Array[String]) -> Result[Int, My-Error] =
	let? first = numbers.at(0)
	let? a = Int.parse(first)

	let? second = numbers.at(1)
	let? b = Int.parse(second)

	Ok(a + b)


let example-3(numbers: Array[String]) -> Result[Int, My-Error] =
	numbers.at(0)
		.and-then(first =>
			Int.parse(first)
				.and-then(a =>
					numbers.at(1)
						.and-then(second =>
							Int.parse(second)
								.and-then(b =>
									Ok(a + b)
								) as Result[Int, My-Error]
						) as Result[Int, My-Error]
				) as Result[Int, My-Error]
		) as Result[Int, My-Error]


let example-3(numbers: Array[String]) -> Result[Int, String] =
	let? first = numbers.at(0)
		.ok-or("empty array")

	let? a = Int.parse(first)
		.map-err(e => "parse error: {e}")

	let? second = numbers.at(1)
		.ok-or("array too small")

	let? b = Int.parse(second)
		.map-err(e => "parse error: {e}")

	Ok(a + b)


let example-3(numbers: Array[String]) -> Result[Int, String] =
	numbers.at(0)
		.ok-or("empty array")
		.and-then(first =>
			Int.parse(first)
				.map-err(e => "parse error: {e}")
				.and-then(a =>
					numbers.at(1)
						.ok-or("array too small")
						.and-then(second =>
							Int.parse(second)
								.map-err(e => "parse error: {e}")
								.and-then(b =>
									Ok(a + b)
								)
						)
				)
		)


let example-4(numbers: Array[String]) -> Result[Int, String] =
	let? first = numbers.at(0)
	else! _ => "empty array"

	let? a = Int.parse(first)
	else! e => "parse error: {e}"

	let? second = numbers.at(1)
	else! _ => "array too small"

	let? b = Int.parse(second)
	else! e => "parse error: {e}"

	Ok(a + b)


let example-4-desugared(numbers: Array[String]) -> Result[Int, String] =
	numbers.at(0)
		.<fail>(=> "empty array")
		.and-then(first =>
			Int.parse(first)
				.<fail>(e => "parse error: {e}")
				.and-then(a =>
					numbers.at(1)
						.<fail>(=> "array too small")
						.and-then(second =>
							Int.parse(second)
								.<fail>(e => "parse error: {e}")
								.and-then(b =>
									Ok(a + b)
								)
						)
				)
		)


---- Chaining Operator --------------------------------------------------------


let example-5(numbers: Array[String]) -> Option[Int] =
	numbers.at(0)?.to-Int?.abs


let example-5-desugared(numbers: Array[Int]) -> Option[String] =
	numbers.at(0).and-then(=> ___.to-int.and-then(=> ___.abs))


---- Monadic Bind with failure wrapping ---------------------------------------


<<
From a Rust RFC:
	fn get_count_item(s: &str) -> (u64, &str) {
		let mut it = s.split(' ');
		let (Some(count_str), Some(item)) = (it.next(), it.next()) else {
			panic!("Can't segment count item pair: '{s}'");
		};
		let Ok(count) = u64::from_str(count_str) else {
			panic!("Can't parse integer: '{count_str}'");
		};
		(count, item)
	}
>>


let get-count-item(s: String) -> Result[(Int, String), String] =
	let it = s.split(Char " ")

	let? count-str = it.item
		.ok-or("can't segment count/item pair: '{s}'")

	let it' = it.next

	let? item = it'.item
		.ok-or("can't segment count/item pair: '{s}'")

	let? count = Int.parse(count-str)
		.map-err(e => "can't parse integer '{count_str}': {e}")

	Ok((count, item))


let get-count-item(s: String) -> Result[(Int, String), String] =
	let it = s.split(Char " ")

	let? count-str = it.item
	else! _ => "can't segment count/item pair: '{s}'"

	let it' = it.next

	let? item = it'.item
	else! _ => "can't segment count/item pair: '{s}'"

	let? count = Int.parse(count-str)
	else! e => "can't parse integer '{count_str}': {e}")

	Ok((count, item))


let My-Error =
	| Segment
	| Parse(cause: Int.Parse-Error)


let get-count-item(s: String) -> Result[(Int, String), My-Error] =
	let it = s.split(Char " ")
	let? count-str = it.item.ok-or(My-Error.Segment)
	let it' = it.next
	let? item = it'.item.ok-or(My-Error.Segment)
	let? count = Int.parse(count-str).map-err(e => My-Error.Parse(e))

	(count, item)


let get-count-item(s: String) -> Result[(Int, String), My-Error] =
	let it = s.split(Char " ")
	let? count-str = it.item else! _ => My-Error.Segment
	let it' = it.next
	let? item = it'.item else! _ => My-Error.Segment
	let? count = Int.parse(count-str) else! e => My-Error.Parse(e)

	(count, item)
