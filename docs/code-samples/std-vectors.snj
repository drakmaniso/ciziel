module /std/vectors


use /std/math  { #num, #add }


-------------------------------------------------------------------------------


def #has-scalar =
	has Self.Scalar: #num


def #vector: #has-scalar #add =
	has (v: Self).length -> Self.Scalar
	has (v: Self).normalized -> Self
	has (v: Self) * (other: Self.Scalar) -> Self


def #vec2: #has-scalar =
	has Self { x: Self.Scalar, y: Self.Scalar }
	has (v: Self).x -> Self.Scalar
	has (v: Self).y -> Self.Scalar
	has (v: Self).with { x: Self.Scalar }
	has (v: Self).with { y: Self.Scalar }


def #vec3: #has-scalar =
	has Self { x: Self.Scalar, y: Self.Scalar, z: Self.Scalar }
	has (v: Self).x -> Self.Scalar
	has (v: Self).y -> Self.Scalar
	has (v: Self).z -> Self.Scalar
	has (v: Self).with { x: Self.Scalar }
	has (v: Self).with { y: Self.Scalar }
	has (v: Self).with { z: Self.Scalar }


-------------------------------------------------------------------------------


given V: #vec2
def #add for V


given V: #vec2
def V.zero =
	V {
		x = V.Scalar.zero,
		y = V.Scalar.zero,
	}


given V: #vec2
def (v: V) + (other: V) -> V =
	V {
		x = v.x + other.x,
		y = v.y + other.y,
	}


given V: #vec2
def (v: V) - (other: V) -> V =
	V {
		x = v.x - other.x,
		y = v.y - other.y,
	}


given V: #vec2
def #vector for V


given V: #vec2
def (v: V).length -> V.Scalar =
	((v.x * v.x) + (v.y * v.y)).sqrt


given V: #vec2
def (v: V).normalized -> V =
	let l = v.length

	in v.with { x /= l, y /= l }


given V: #vec2
def (v: V) * (other: V) -> V =
	V {
		x = v.x * other.x,
		y = v.y * other.y,
	}


-------------------------------------------------------------------------------


-- Implement `#vector` for `Vec2` using the automatic extension:


def Vec2 = data record(x: Float32, y: Float32)


def Vec2.Scalar = Float32


def #has-scalar #vec2 for Vec2


-------------------------------------------------------------------------------


-- Implement `#vector` for `Polar2` manually:


def Polar2 = data record(angle: Float32, length: Float32)


def #has-scalar #vector for Polar2


def Polar2.Scalar = Float32


def Polar2.zero =
	Polar2(0, 0)


def (p: Polar2).normalized -> Polar2 =
    p.with { length = 1 }


def (p: Polar2) + (other: Polar2) -> Polar2 =
    ...


def (p: Polar2) - (other: Polar2) -> Polar2 =
    ...


def (p: Polar2) * (other: Float32) -> Polar2 =
    ...


def (other: Float32) * (p: Polar2) -> Polar2 =
    ...


-------------------------------------------------------------------------------


data type Point(x: Float32, y: data Float32)


data type Point.Scalar = Float32


def Point.origin = Point(0, 0)


def (p1: Point) + (p2: Vec2) -> Point =
	Point(p1.x + p2.x, p1.y + p2.y)


def (p1: Point).distance(p2: Point) -> Float32 =
	let p1' = p1 as Vec2
	let p2' = p2 as Vec2
	(p' - p2').length


def (p: Point) as Vec2 -> Vec2 =
	Vec2(p.x, p.y)


def (p: Vec2) as Point -> Point =
	Point(p.x, p.y)
