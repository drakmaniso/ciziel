module /std/iterators


-------------------------------------------------------------------------------


def #iterable =
    has Self.Iterator: #iterator
    has (Self).iterator -> Self.Iterator


def #iterator =
    has Self.Item: #any
	has (Self).peek -> Option[Self.Item]
	has (Self).next -> Self


-------------------------------------------------------------------------------


def Map[I #iterator, A] =
	record {
		iterator: I,
		transform: I.Item -> A,
	}


def Map[I, A] as #iterator


def Map[I, A].Item = A


def (Map[I, A]).peek -> Option[A] =
	let? item = self.iterator.peek
	Ok(self.transform(item))


def (Map[I, A]).next -> Map[I, A] =
	self.with {
		iterator = self.iterator.next
	}


local ["test"] ----------------------------------------------------------------


use /std/io (&io)


type Counter {
    count: Int,
    limit: public Int,
}


let Counter.new(limit: Int) -> Counter =
    Counter { count = 0, limit = limit }


let Counter as #iterator


let Counter.Item = Int


let (Counter).peek -> Option[Int] =
	if self.count >= self.limit then
		None
	else
		Ok(self.count)


let (Counter).next -> Counter =
	if self.count >= self.limit then
		self
	else
		self.with { count = count + 1 }


let example() -> Nil &io =
	let step(c) =
		match c.peek
		when None then
			print("Done!")
		else when Ok(number) then
			do print("{number}, ")
			step(c.next)

	let counter = Counter.new(7)

	step(counter)


-------------------------------------------------------------------------------

given I #iterator
let foo(iterator: I, f: I.Item -> Int) -> Array[Int] =
    iterator.fold(Array(), Array.push)


given I #iterator,
	J #iterator,
	I.Item == J.Item,
	I.Item #eq
let compare(i: I, j: J) -> Bool =
    match (i.peek, j.peek)
	case (None, None) then
		True
	case (Ok(a), Ok(b)) and (a == b) then
		compare(i-next, j-next)
	else
		False
