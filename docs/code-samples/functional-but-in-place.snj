Polygon = struct {
    vertices: Array[Vec2]
}


<< `offset` is an updater: a method where the return type is the same as the
receiver type. >>
(Polygon).offset(delta: Vec2) -> Polygon =
    self.vertices.map(=> ___ + delta)


main() -> Nil &io =
	do
		shape = Polygon(vertices = [...])
		shape' = shape.offset(Vec2(1, 0)) -- `offset` should *mutate* the array
		io.print(shape')
	end


main() -> Nil &io =
	do
		shape = Polygon(vertices = [...])
		print(shape.offset(Vec2(1, 0))) -- `offset` should *allocate* a new array
		print(shape)
	end


main() -> Nil &io =
	do
		shape = Polygon(vertices = [...])
		io.print(shape.offset(Vec2(1, 0))) -- `offset` should *mutate* the array
	end


-- Computed Properties --------------------------------------------------------


Angle = struct {
    radians: Float64
}


(Angle).degrees -> Float64 =
    (self.radians * 180) / (2 * math::pi)


(Angle).with-degrees(degrees: Float64) -> Angle =
    Angle(radians = (degrees * 2 * math::pi) / 180)


main() -> Nil &io =
	do
		theta = Angle(radians = 0.12)
		x = theta.degrees
		theta' = theta.with-degrees(x + 90) -- mutates `theta`
		print(theta')
	end
