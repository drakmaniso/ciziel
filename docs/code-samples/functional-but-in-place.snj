let Polygon =
	struct {
		vertices: Array[Vec2]
	}


<< `offset` is an updater: a method where the return type is the same as the
receiver type. >>
let (p: own Polygon).offset(delta: Vec2) -> own Polygon =
	p.vertices.map(=> ___ + delta)


let example-1() -> () &io =
	let shape = Polygon { vertices = [...] }
	let shape' = shape.offset(Vec2(1, 0)) -- *mutates* the array
	do print(shape')
	()


let example-2() -> () &io =
	let shape = Polygon { vertices = [...] }
	do print(shape.offset(Vec2(1, 0))) -- *allocates* a new array (i.e. inserts `clone` then mutates)
	do print(shape)
	()


let example-3() -> () &io =
	let shape = Polygon { vertices = [...] }
	do print(shape.offset(Vec2(1, 0))) -- `offset` should *mutate* the array
	()


-- Computed Properties --------------------------------------------------------


let Angle =
	struct {
		radians: Float64
	}


let (a: Angle).degrees -> Float64 =
    (a.radians * 180) / (2 * math::pi)


let (a: own Angle).with-degrees(degrees: Float64) -> own Angle =
    a with { radians = (degrees * 2 * math::pi) / 180 }


let example-4() -> () &io =
	let theta = Angle { radians = 0.12 }
	let x = theta.degrees
	let theta' = theta.with-degrees(x + 90) -- mutates `theta`
	do print(theta')
	()
