-- Constructors ---------------------------------------------------------------


def Foo: #data =
	struct {
		a: Int,
		b: Bool,
	}


<< desugars to: >>


def Foo =
	struct {
		a: Int,
		b: Int,
	}


def Foo { a: Int, b: Bool } -> Foo


def (Foo).a -> Int
def (Foo).b -> Bool


def (Foo).with { a: Int } -> Foo
def (Foo).with { b: Bool } -> Foo


-- Functional Update ----------------------------------------------------------


foo.with { a = 33, b = False }


<< desugars to: >>


foo.with { a = 33 }.with { b = False }


-- Associated Functions -------------------------------------------------------


def Foo.bar(a: Int, b: Bool) -> String =
    "foobar"


<< desugars to an associated constant: >>


def Foo.bar: (Int, Bool) -> String =
    (a, b) ->
		"foobar"


-- Methods --------------------------------------------------------------------


def (f: Foo).baz(a: Int, b: Bool) -> String =
    "foobaz"


<< desugars to an associated function: >>


def Foo.baz(f: Foo, a: Int, b: Bool) -> String =
    "foobaz"


<< which desugars to an associated constant: >>


def Foo.baz: (Foo, Int, Bool) -> String =
    (f, a, b) ->
		"foobaz"


-- Property Calls -------------------------------------------------------------


foo.a


<< desugars to: >>


Foo.a(foo)



-- Method Calls ---------------------------------------------------------------


foo.baz(1, True)


<< desugars to: (assuming `Foo` is the type of `foo`) >>


Foo.baz(foo, 1, True)


-- Operator Calls -------------------------------------------------------------


<< Any left-associative operator: >>


foo + bar


<< desugars to a method call: >>


foo.+(bar)


<< which desugars to a function call: >>


Foo.+(foo, bar)


-- Short Lambdas --------------------------------------------------------------


foo(___, 33, ___)


<< desugars to: >>


(a, b) -> foo(a, 33, b)
