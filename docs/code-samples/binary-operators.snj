module std.ops


def #add = trait {
    has Self.zero: Self
    has (Self) + (other: Self) -> Self
}


def #add-with[A] = trait {
    has Self.Add-Output
    has Self.zero: Self
    has (Self) + (other: A) -> Self.Add-Output
    has (A) + (other: Self) -> Self.Add-Output
}


def #mul = trait {
    has Self.one: Self
    has (Self) * (other: Self) -> Self
}


def #mul-with[A] = trait {
    has Self.Mul-Output
    has Self.one: Self
    has (Self) * (other: A) -> Self.Mul-Output
    has (A) * (other: Self) -> Self.Mul-Output
}


forall A #add
def #add-with[A] for A


forall A #add
def A.Add-Output = A



-------------------------------------------------------------------------------


module vec


use std::ops (#add, #mul)


def Vec2 = struct {
    data x: Float
    data y: Float
}


def #add for Vec2


def Vec2.zero = Vec2(0, 0)


def (Vec2) + (other: Vec2) -> Vec2 {
    Vec2(self.x + other.x, self.y + other.y)
}


def #mul-with[Float] for Vec2


def Vec2#mul-with.Output = Vec2


def (Vec2) * (other: Float) -> Vec2 {
    Vec2(self.x * other, self.y * other)
}


def (Float) * (other: Vec2) -> Vec2 {
    Vec2(self * other.x, self * other.y)
}
