module std'ops


trait #add =
    RightHand(type Self) -> type #any
    Output(type Self) -> type #any
    `+`(left: Self, right: Self.RightHand) -> Self.Output


trait #mul =
    RightHand(type Self) -> type #any
    Output(type Self) -> type #any
    `*`(left: Self, right: Self.RightHand) -> Self.Output


-------------------------------------------------------------------------------


module vec


use std'ops for #add, #mul


struct Vec2 =
    x: Float
    y: Float
    ensure #add, #sub, #mul


func RightHand(type Vec2 #add) = Vec2


func Output(type Vec2 #add) = Vec2


func `+`(left: Vec2, right: Vector) -> Vec2 =
    Vec2(left.x + right.x, left.y + right.y)


func RightHand(type Vec2 #mul) = Float


func Output(type Vec2 #mul) = Vec2


func `*`(left: Self, right: Float) -> Vec2 =
    Vec2(left.x * right, left.y * right)
