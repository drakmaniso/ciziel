module std::ops


public #add =
    has Self.RightHand
    has Self.Output
    has (Self) + (other: Self.RightHand) -> Self.Output

public #zero =
    has ...#add
    has Self.zero: Self


public #mul =
    has Self.RightHand
    has Self.Output
    has (Self) * (other: Self.RightHand) -> Self.Output


public #one =
    has ...#mul
    has Self.one: Self


-------------------------------------------------------------------------------


module vec


use std::ops (#add, #mul)


public Vec2 =
    struct(
        x: Float,
        y: Float,
    )
    impl #add, #zero, #mul


public Vec2#add.RightHand = alias Vec2


public Vec2#add.Output = alias Vec2


public (Vec2) + (other: Vector) -> Vec2 =
    Vec2(self.x + other.x, self.y + other.y)


public Vec2.zero = Vec2(0, 0)


public Vec2#mul.RightHand = alias Float


public Vec2#mul.Output = alias Vec2


public (Vec2) * (other: Float) -> Vec2 =
    Vec2(self.x * other, self.y * other)
