module std.ops


def #add {
    has Self.zero: Self
    has + (right: Self) -> Self
}


def #add-other {
    has Self.Other
    has Self.Output
    has + (right: Self.Other) -> Self.Output
    has Self.+ (left: Self.Other, right: Self) -> Self.Output
}


def #mul {
    has Self.one: Self
    has * (right: Self) -> Self
}


def #mul-other {
    has Self.Other
    has Self.Output
    has * (right: Self.Other) -> Self.Output
    has Self.* (left: Self.Other, right: Self) -> Self.Output
}


///////////////////////////////////////////////////////////////////////////////


module vec


use std::ops (#add, #mul)


def Vec2 {
    var x: Float
    var y: Float
}


extend Vec2 as #add {
    def Vec2.zero = Vec2(0, 0)

    def + (right: Vec2) -> Vec2 {
        Vec2(self.x + other.x, self.y + other.y)
    }
}


extend Vec2 as #mul-other {
    def Vec2.Other = Float

    def Vec2.Output = Vec2

    def * (right: Float) -> Vec2 {
        Vec2(self.x * other, self.y * other)
    }

    def .* (left: Float, right: Vec2) -> Vec2 {
        Vec2(left * right.x, left * right.y)
    }
}
