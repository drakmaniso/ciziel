module std::ops


def #add {
    has ::Other
    has ::Output
    has operator self + (other: Self::Other) -> Self::Output
    has operator (other: Self::Other) + self -> Self::Output
}


def #add-with-zero {
    has #add
    has #add::Other == Self
    has #add::Output == Self
    has ::zero: Self
}


def #mul {
    has ::Other
    has ::Output
    has operator self * (other: Self::Other) -> Self::Output
    has operator (other: Self::Other) * self -> Self::Output
}


def #mul-with-one {
    has #mul
    has #mul::Other == Self
    has #mul::Output == Self
    has Self::one: Self
}


-------------------------------------------------------------------------------


module vec


use std::ops (#add, #mul)


def Vec2 = struct(var x: Float, var y: Float)

for Vec2 as #add {
    def ::Other = Vec2

    def ::Output = Vec2

    def operator self + (other: Vec2) -> Vec2 {
        Vec2(self.x + other.x, self.y + other.y)
    }

    def operator (other: Vec2) + self -> Vec2 {
        Vec2(other.x + self.x, other.y + self.x)
    }
}


for Vec2 as #zero {
    def Vec2.zero = Vec2(0, 0)
}


for Vec2 as #mul {
    def ::Other = Float

    def ::Output = Vec2

    def operator self * (other: Float) -> Vec2 {
        Vec2(self.x * other, self.y * other)
    }

    def operator (other: Float) * self -> Vec2 {
        Vec2(other * self.x, other * self.y)
    }
}
