module std::ops


define #add =
    trait {
        Self.RightHand
        Self.Output
        (Self) + (other: Self.RightHand) -> Self.Output
    }

define #zero =
    trait {
        ...#add
        Self.zero: Self
    }


define #mul =
    trait {
        Self.RightHand
        Self.Output
        (Self) * (other: Self.RightHand) -> Self.Output
    }


define #one =
    trait {
        ...#mul
        Self.one: Self
    }


-------------------------------------------------------------------------------


module vec


use std::ops (#add, #mul)


define Vec2 =
    struct {
        x: Float,
        y: Float,
    }
    impl #add, #sub, #mul


define Vec2#add.RightHand = alias Vec2


define Vec2#add.Output = alias Vec2


define (Vec2) + (other: Vector) -> Vec2 =
    Vec2(self.x + other.x, self.y + other.y)


define Vec2#mul.RightHand = alias Float


define Vec2#mul.Output = alias Vec2


define (Vec2) * (other: Float) -> Vec2 =
    Vec2(self.x * other, self.y * other)
