-- Constructors ---------------------------------------------------------------


Foo =
	struct {
		a: data Int,
		b: data Bool,
	}


<< automatically defines: >>


Foo { a: Int, b: Bool } -> Foo = auto


(Foo).a -> Int = auto
(Foo).b -> Bool = auto


(Foo).with { a: Int } -> Foo = auto
(Foo).with { b: Bool } -> Foo = auto


-- Functional Update ----------------------------------------------------------


foo.with { a = 33, b = False }


<< desugars to: >>


foo.with { a = 33 }.with { b = False }


-- Associated Functions -------------------------------------------------------


Foo.bar(a: Int, b: Bool) -> String =
    "foobar"


<< desugars to an associated constant: >>


Foo.Type.bar: (Foo.Type, Int, Bool) -> String =
    (_, a, b) =>
		"foobar"


-- Methods --------------------------------------------------------------------


(Foo).baz(a: Int, b: Bool) -> String =
    "foobaz"


<< desugars to an associated function: >>


Foo.baz(self: Foo, a: Int, b: Bool) -> String =
    "foobaz"


<< which desugars to an associated constant: >>


Foo.baz: (Foo, Int, Bool) -> String =
    (self, a, b) =>
		"foobaz"


-- Method Calls ---------------------------------------------------------------


foo.baz(___, 1, True)


<< desugars to: (assuming `Foo` is the type of `foo`) >>


(foo.Type)::baz(foo, 1, True)


-- Operator Calls -------------------------------------------------------------


<< Any left-associative operator: >>


foo + bar


<< desugars to a method call: >>


foo.+(bar)


<< which desugars to a function call: >>


Foo.+(foo, bar)


-- Short Lambdas --------------------------------------------------------------


=> foo(___, 33, ___)


<< desugars to: >>


(a, b) => foo(a, 33, b)
