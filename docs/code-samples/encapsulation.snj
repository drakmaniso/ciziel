--- Encapsulation


--- Structs -------------------------------------------------------------------


<< A struct declared with `let` is completely private: it cannot be used outside
the module, and cannot appear in the public interface of the module. All its
fields are private and must be declared with `let`. >>


let Private = struct {
    let foo: Int
    let bar: Bool
}


<< A struct declared with `def` is public, and can be used outside the module.
However, if the fields are declared with `let`, then the constructor is private
and so are the fields. >>


def Opaque = struct {
    let foo: Int
    let bar: Bool
}


<< Read-Only Struct >>
def Read-Only = struct {
    def foo: Int
    def bar: Bool
}


<< Transparent Struct >>
def Transparent = struct {
    data foo: Int
    data bar: Bool
}


<< Translucent Struct >>
def Translucent = struct {
    let opaque: Int
    def read-only: Bool
    data transparent: String
}



--- Unions --------------------------------------------------------------------


<< Private Union >>
let Private = union {
    let Foo
    let Bar
}


<< Opaque Union >>
def Opaque = union {
    let Foo
    let Bar
}


<< Transparent Union >>
def Transparent = union {
    def Foo
    def Bar
}


<< Translucent Union >>
def Translucent = union {
    def Foo
    let Bar
}


<< NOTE: Because unions are structural, it's impossible to create an opaque union of
public types. >>


-- Structs as Syntax Sugar ----------------------------------------------------


def My-Struct = struct {
    def foo: Int
    let bar: Bool
}


<< ...is sugar for: >>


def My-Struct = union {
    def My-Struct {
        def foo: Int
        let bar: Bool
    }
}


--- Traits --------------------------------------------------------------------


<< Private Traits >>
let #private = trait {
    has (Self).foo -> Int
    has (Self).bar(arg: Bool) -> String
}


<< Public Traits >>
def #transparent = trait {
    has (Self).foo -> Int
    has (Self).bar(arg: Bool) -> String
}


<< Opaque Traits >>
def #opaque = trait {
    has #private
}


let #private = trait {
    has (Self).foo -> Int
    has (Self).bar(arg: Bool) -> String
}


--- Proxy Struct? -------------------------------------------------------------


def Cartesian = struct {
    data x: Float64
    data y: Float64
}


def Polar = proxy Cartesian


def Polar(radius: Float64, angle: Float64) -> Cartesian {
    Cartesian(
        x = radius * math::cos(angle),
        y = radius * math::sin(angle),
    )
}


def (Polar).radius -> Float64 {
    math::sqrt((self.x ^ 2) + (self.y ^ 2))
}


def (Polar).angle -> Float64 {
    math::atan2(self.y, self.x)
}


<< ...or: >>

<< ...would be used like the following struct: >>


def Polar = struct {
    data radius: Float64
    data angle: Float64
}
