<< Encapsulation >>


--- Structs -------------------------------------------------------------------


private --- Private Struct


struct Private {
	foo: Int,
	bar: Bool,
}


public --- Opaque Struct


struct Opaque {
	foo: Int,
	bar: Bool,
}


public --- Read-Only Struct


struct Read-Only {
	foo: public Int,
	bar: public Bool,
}


public --- Transparent Struct


struct Transparent {
	foo: data Int,
	bar: data Bool,
}


public --- Translucent Struct


struct Translucent {
	hidden: Int,
	read-only: public Bool,
	read-write: data String,
}


--- Unions --------------------------------------------------------------------


private --- Private Union


type Private =
    | Private-Foo
    | Private-Bar


public --- Opaque Union


type Opaque =
    | Private-Foo
    | Private-Bar


public --- Transparent Union


type Transparent =
    | Public-Foo
    | Public-Bar


public --- Translucent Union


type Translucent =
    | Public-Foo
    | Private-Bar


<< NOTE: Because unions are structural, it's impossible to create an opaque union of
public types. >>


--- Traits --------------------------------------------------------------------


private --- Private Traits


trait #private {
	def (Self).foo -> Int
	def (Self).bar(arg: Bool) -> String
}


public --- Public Traits


trait #transparent {
	def (Self).foo -> Int
	def (Self).bar(arg: Bool) -> String
}


public --- Opaque Traits


trait #opaque {
	trait #private
}
