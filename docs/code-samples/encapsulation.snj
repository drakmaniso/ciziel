<< Encapsulation >>


--- Structs -------------------------------------------------------------------


private --- Private Struct


Private =
	struct {
		foo: Int,
		bar: Bool,
	}


public --- Opaque Struct


Opaque =
	struct {
		foo: Int,
		bar: Bool,
	}


public --- Read-Only Struct


Read-Only =
	struct {
		foo: public Int,
		bar: public Bool,
	}


public --- Transparent Struct


Transparent =
	struct {
		foo: data Int,
		bar: data Bool,
	}


public --- Translucent Struct


Translucent =
	struct {
		hidden: Int,
		read-only: public Bool,
		read-write: data String,
	}


--- Unions --------------------------------------------------------------------


private --- Private Union


Private =
    | Private-Foo
    | Private-Bar


public --- Opaque Union


Opaque =
    | Private-Foo
    | Private-Bar


public --- Transparent Union


Transparent =
    | Public-Foo
    | Public-Bar


public --- Translucent Union


Translucent =
    | Public-Foo
    | Private-Bar


<< NOTE: Because unions are structural, it's impossible to create an opaque union of
public types. >>


--- Traits --------------------------------------------------------------------


private --- Private Traits


#private =
	trait {
		(Self).foo -> Int
		(Self).bar(arg: Bool) -> String
	}


public --- Public Traits


#transparent =
	trait {
		(Self).foo -> Int
		(Self).bar(arg: Bool) -> String
	}


public --- Opaque Traits


#opaque =
	trait {
		Self #private
	}
