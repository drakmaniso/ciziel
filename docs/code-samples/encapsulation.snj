<< Encapsulation >>


-------------------------------------------------------------------------------


local


struct Private {
	foo: Int,
	bar: Bool,
}


public


struct Opaque {
	foo: Int,
	bar: Bool,
}


struct Read-Only {
	foo: public Int,
	bar: public Bool,
}


struct Transparent {
	foo: data Int,
	bar: data Bool,
}


struct Translucent {
	hidden: Int,
	read-only: public Bool,
	read-and-write: data String,
}


-------------------------------------------------------------------------------


local


union Private =
    | Foo
    | Bar


public


type Opaque = Private


union Transparent =
    | Foo
    | Bar


-------------------------------------------------------------------------------


local


trait #private {
	fun (Self).foo -> Int
	fun (Self).bar(arg: Bool) -> String
}


public


trait #opaque {
	trait #private
}


trait #transparent {
	fun (Self).foo -> Int
	fun (Self).bar(arg: Bool) -> String
}
