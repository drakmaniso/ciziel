<< Encapsulation >>


-- Records --------------------------------------------------------------------


let Private =
	struct {
		foo: Int,
		bar: Bool,
	}


def Opaque =
	struct {
		foo: Int,
		bar: Bool,
	}


def Mixed =
	struct {
		hidden: Int,
		def read-only: Bool,
		public writable: String,
	}


def Transparent =
	public struct {
		foo: Int,
		bar: Bool,
	}


-- Unions ---------------------------------------------------------------------


let Private =
	union Foo | Bar


def Opaque =
	union Foo | Bar


def Transparent =
	public union Foo | Bar


-- Aliases --------------------------------------------------------------------


let Foo = Int


<< Outside of the module, `Foo` is visible, but opaque (i.e. it is not an alias
for `Int` anymore). >>
def Foo = union Int


def Foo = public union Int


-------------------------------------------------------------------------------


let #private =
	trait
	has (t: Self).foo -> Int
	has (t: Self).bar(arg: Bool) -> String


def #opaque =
	trait
	has Self #private


def #transparent =
	trait
	has (t: Self).foo -> Int
	has (t: Self).bar(arg: Bool) -> String
