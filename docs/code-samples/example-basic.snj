module main


use Io from std::io


-------------------------------------------------------------------------------


def main() -> None / Io =
	let get-number() =
		do Io.put-string("Please enter a number: ")
		let answer = Io.get-line()
		in
		match answer.to-int
		case Some(number?) then number
		else None then get-number()

	let number = get-number()
	let naive = naive-factorial(number)
	let tail = tail-factorial(number)
	let folded = folded-factorial(number)

	do Io.put-line("naive factorial: {naive}")
	do Io.put-line("tail recursive factorial: {tail}")
	do Io.put-line("fold-based factorial: {folded}")

	in
	None


-------------------------------------------------------------------------------


let naive-factorial(n) =
	if n <= 1 then 1
	else n * naive-factorial(n - 1)


let tail-factorial(n: Int32) -> Int32 =
	let step(n, accum) =
		if n <= 1 then
			accum
		else
			goto step(n - 1, n * accum)
	in
	step(n, 1)


let fold-factorial(n: Int32) -> Int32 =
	(2 <upto> n).fold(1, Int32.*)


given N: #num
let generic-tail-factorial(number: N) -> N =
	let step(num, accum) =
		if num <= N.one then
			accum
		else
			step(num - N.one, num * accum)
	in
	step(number, N.one)


given N: #num #range
let generic-fold-factorial(number: N) -> N =
	(N.one <upto> number).fold(N.one, N.*)


-------------------------------------------------------------------------------


let gcd(a: Int32, b: Int32) -> Int32 =
	let a' = (a, b).max
	let b' = (a, b).min
	in
	if b' == 0 then
		a'
	else
		gcd(b', a' mod b')


let gcd(a: Int32, b: Int32) -> Int32 =
	let (a, b) = ((a, b).max, (a, b).min)
	in
	if b == 0 then
		a
	else
		gcd(b, a mod b)


let gcd(a: Int32, b: Int32) -> Int32 =
	let [a, b] = [a, b].sort
	in
	if a == 0 then
		b
	else
		gcd(a, b mod a)


let fibonacci(n: Int32) -> Int32 =
	let step(n, previous, current) =
		if n == 0 then
			current
		else
			step(n - 1, current, previous + current)
	in
	step(n, 1, 1)


-------------------------------------------------------------------------------


let pipeline-example-1() =
	let my-array = Array(1, 2, 3, 4, 5, 6, 7)
	in
	my-array
		.iterator
		.filter(___.is-even)
		.map(___ * 2)
		.fold("", (s, n) => "{s}, {n <to> String}")
		.map(char =>
			let next-char = (char.code + 1) to Char
			in
			if next-char.is-letter then
				next-char.to-uppercase
			else
				Rune("?") )
		collect Array


let pipeline-example-2() =
	let names = Array("Judy", "Mary", "Jane", "", "Bop")
	in
	names
		.iterator
		.map(___.to-lowercase)
		.filter(name => name.length > 0)
		.filter(name => name.test-all(___.is-alpha))
		.map(name =>
			if name == "Bop" then
				"Betty"
			else if name.length > 100 then
				"(too long)"
			else
				name )
		.fold("", (string, name) =>
			if string.length > 0 then
				string ++ ", " ++ name
			else
				string ++ name )

-- or:

let pipeline-example-3() =
	let names = Array("Judy", "Mary", "Jane", "", "Bop")
	in
	names
		.iterator
		.map(=> ___.to-lowercase)
		.filter(=> ___.length > 0)
		.filter(=> ___.test-all(=> ___.is-alpha))
		.map(name =>
			if name == "Bop" then
				"Betty"
			else if name.length > 100 then
				"(too long)"
			else
				name )
		.fold("", (string, name) =>
			if string.length > 0 then
				string ++ ", " ++ name
			else
				string ++ name )
