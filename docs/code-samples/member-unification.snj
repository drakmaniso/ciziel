let Pet = Cat | Dog


let Cat = struct {
    let name: String
    let favorite-toy: Cat.Toy
}


let Dog = struct {
    let name: String
    let favorite-toy: Dog.Toy
}


let Cat.Toy = Wool-Ball | Laser | Wand
let Wool-Ball = struct {}
let Laser = struct {}
let Wand = struct {}


let Dog.Toy = Chew-Bone | Stick | Squeaky-Ball
let Chew-Bone = struct {}
let Stick = struct {}
let Squeaky-Ball = struct {}


let (Pet).name -> String
let (Pet).favorite-toy -> Cat.Toy | Dog.Toy
let Pet.Toy = Cat.Toy | Dog.Toy


let (Pet).greets(human: String) -> Io[]


let (Cat).greets(human: String) -> Io[] {
    Io.print("{self.name} ignores {human}")
}


let (Dog).greets(human: String) -> Io[] {
    Io.print("{self.name} plays with {human}")
}


<< The `play` method cannot be unified: >>


let (Cat).play(toy: Cat.Toy) -> Io[] {
    Io.print("{self.name} plays with {toy}")
}


let (Dog).play(toy: Dog.Toy) -> Io[] {
    Io.print("{self.name} plays with {toy}")
}
