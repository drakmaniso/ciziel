/*
## Constructors ###############################################################
*/


let Foo {
    let a: Int
    let b: Bool
}


/*
implicitly declares the default constructor:
*/


let Foo(a: Int, b: Bool) -> Foo {
    Foo(a, b)
}


/*
## Functional Update ##########################################################
*/


my-foo.with(a: 33)


/*
desugars to:
*/


Foo(a: 33, ...my-foo)


/*
## Associated Functions #######################################################
*/


extend Foo {
    let bar(a: Int, b: Bool) -> String {
        "foobar"
    }
}


/*
desugars to an associated constant:
*/


extend Foo {
    let bar: fun(Int, Bool) -> String =
        fun(a, b) {
            "foobar"
        }
}


/*
## Methods ####################################################################
*/


extend Foo {
    let baz(self, a: Int, b: Bool) -> String {
        "foobaz"
    }
}


/* desugars to an associated function: */


extend Foo {
    let baz(self: Foo, a: Int, b: Bool) -> String {
        "foobaz"
    }
}


/*
which desugars to an associated constant:
*/


extend Foo {
    let baz: fun(Foo, Int, Bool) -> String =
        fun(self, a, b) {
            "foobaz"
        }
}


/*
## Method Calls ###############################################################
*/


my-foo.baz(1, True)


/*
desugars to: (assuming `Foo` is the type of `my-foo`)
*/


Foo.baz(my-foo, 1, True)
