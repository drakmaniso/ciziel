-- Constructors ---------------------------------------------------------------


let Foo = struct {
    let a: Int
    let b: Bool
}


<< implicitly declares the default constructor: >>


let Foo(a: Int, b: Bool) -> Foo


-- Functional Update ----------------------------------------------------------


my-foo.with(a: 33)


<< desugars to: >>


Foo(a: 33, ...my-foo)


-- Associated Functions -------------------------------------------------------


let Foo.bar(a: Int, b: Bool) -> String {
    "foobar"
}


<< desugars to an associated constant: >>


let Foo.bar: (Int, Bool) -> String = {
    a, b =>
        "foobar"
}


-- Methods --------------------------------------------------------------------


let (Foo).baz(self, a: Int, b: Bool) -> String {
    "foobaz"
}


<< desugars to an associated function: >>


let Foo.baz(self: Foo, a: Int, b: Bool) -> String {
    "foobaz"
}


<< which desugars to an associated constant: >>


let Foo.baz: (Foo, Int, Bool) -> String = {
    self, a, b =>
        "foobaz"
}


-- Method Calls ---------------------------------------------------------------


my-foo.baz(1, True)


<< desugars to: (assuming `Foo` is the type of `my-foo`) >>


Foo.baz(my-foo, 1, True)


-- Operators ------------------------------------------------------------------


let Foo <my-static-operator> Bar -> String {
    "foobaz"
}


let Foo <my-half-static-operator> (other: Bar) -> String {
    "foobaz"
}


let (Foo) <my-other-half-static-operator> Bar -> String {
    "foobaz"
}


let (Foo) <my-operator> (other: Bar) -> String {
    "foobaz"
}


-- Operators Calls ------------------------------------------------------------


Foo <my-static-operator> Bar

Foo <my-half-static-operator> my-bar

my-foo <my-other-half-static-operator> Bar

my-foo <my-operator> my-bar
