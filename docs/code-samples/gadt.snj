--- [from wikipedia]: https://en.wikipedia.org/wiki/Generalized_algebraic_data_type
module gadt_example_1

union Expr = EBool | EInt | Equality | Addition
union IntegerExpr = EInt | Addition
union BooleanExpr = EBool | Equality

struct EBool =
    eval: Bool

struct EInt = 
    eval: Int

struct Equality =
    left: EInt
    right: EInt

struct Addition =
    left: EInt
    right: EInt

func (Equality).eval -> Bool = self.left.eval == self.right.eval
func (Addition).eval -> Int = self.left.eval + self.right.eval


-------------------------------------------------------------------------------
--- GADT example: phantom types
--- From ["Fun with phantom types"] by R. Hinze
---
--- ["Fun with phantom types"]: https://www.researchgate.net/publication/228707929_Fun_with_phantom_types
module

trait #term =
    Self'Output
    (Self).eval -> Self'Output

union Term =
    Zero | Succ | Pred | IsZero | If[C, T]
    dispatch #term

struct Zero implement #term
struct Succ = arg: TermInt implement #term
struct Pred = arg: TermInt implement #term
struct IsZero = arg: TermInt implement #term

forall C #term, C'Output == Bool, T #term
struct If[C, T] =
    condition: C
    thenBranch: T
    elseBranch: T
    implement #term

alias Zero'Output = Int
func (Zero).eval -> Int = 0

alias Succ'Output = Int
func (Succ).eval -> Int = self.arg.eval + 1

alias Pred'Output = Int
func (Pred).eval -> Int = self.arg.eval - 1

alias IsZero'Output = Bool
func (IsZero).eval -> Int = self.arg.eval == 0

alias If[C, T]'Output = T
func (If[C, T]).eval -> T.Output =
    if self.condition.eval then
        self.thenBranch.eval
    else
        self.elseBranch.eval


-------------------------------------------------------------------------------
--- GADT example: higher-order abstract syntax
--- From [wikipedia](https://en.wikipedia.org/wiki/Generalized_algebraic_data_type#Higher-order_abstract_syntax)
module

trait #eval =
    Self'Output
    (Self).eval -> Self'Output

struct Lift[T] =
    eval: T
    implement #eval

forall T #eval, U #eval
struct Pair[T, U] =
    first: T
    second: U
    implement #eval

forall T #eval, U #eval
struct Lambda[T, U] =
    function: Func(T) -> U
    implement #eval

forall T #eval, U #eval
struct Apply[T, U] =
    function: Lambda[T, U]
    argument: U
    implement #eval

forall T #eval
struct Fix[T] =
    function: Lambda[T, T]
    implement #eval

alias Pair[T, U]'Output = (T, U)
func (Pair[T, U]).eval -> (T, U) =
    (self.first.eval, self.second.eval)
    
alias Lambda[T, U]'Output = Func(T) -> U
func (Lambda[T, U]).eval -> Func(T) -> U =
    x => self.function(Lift(x)).eval

alias Apply[T, U]'Output = U
func (Apply[T, U]).eval -> U =
    self.function.eval(self.argument.eval)

alias Fix[T]'Output = T
func (Fix[T]).eval -> T =
    self.function.eval(Fix(self.function).eval)

func example() =
    factorial =
        Fix(
            Lambda(\f =>
                Lambda(\y =>
                    Lift(if y.eval == 0 then 1 else y.eval * f.eval(y.eval - 1))
                )
            )
        )
    io'print(factorial.eval(10))
