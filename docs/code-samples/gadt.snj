module gadt


public ------------------------------------------------------------------------


/*
First example, from [wikipedia][1].

[1]: <https://en.wikipedia.org/wiki/Generalized_algebraic_data_type>
*/


type Expr[_] =
	| Expr[Bool].Bool(value: Bool)
	| Expr[Int].Int(value: Int)
	| Expr[Bool].Equal(left: ref Expr[Int], right: ref Expr[Int])
	;


dispatch (Expr[T]).eval -> T
fun (Expr.Bool).eval -> Bool = self.value
fun (Expr.Int).eval -> Int = self.value
fun (Expr.Equal).eval -> Bool = left.equal == right.equal


fun first-example() -> () &io =
	expr1 = Expr.Equal(Expr.Int(2), Expr.Int(3))
	!print("{expr1.Type}")
	-- Expr[Bool]

	eval1 = expr1.eval
	!print("{eval1.Type}")
	-- Bool

	()


public ------------------------------------------------------------------------


/*
Second example, from ["Fun with phantom types"][2] by R. Hinze.

[2]: <https://www.researchgate.net/publication/228707929_Fun_with_phantom_types>
*/


type Term[_] =
	| Term[Int].Zero
	| Term[Int].Succ(arg: Term[Int])
	| Term[Int].Pred(arg: Term[Int])
	| Term[Bool].Is-Zero(arg: Term[Int])
	| Term[T].If {
		condition: Term[Bool],
		then-branch: T,
		else-branch: T,
	}
	;


dispatch (Term[T]).eval -> T
fun (Term.Zero).eval -> Int = 0
fun (Term.Succ).eval -> Int = self.arg.eval + 1
fun (Term.Pred).eval -> Int = self.arg.eval - 1
fun (Term.Is-Zero).eval -> Bool = self.arg.eval == 0
fun (Term[T].If).eval -> T =
	if self.condition.eval then
		self.then-branch.eval
	else
		self.else-branch.eval


public ---- Third GADT Example: Higher-Order Abstract Syntax ------------------


/*
Third example, also from [wikipedia][3].

[3]: <https://en.wikipedia.org/wiki/Generalized_algebraic_data_type#Higher-order_abstract_syntax>
*/


type Expr[_] =
	| Expr[A].Lift(value: A)
	| Expr[(A, B)].Pair(first: A, second: B)
	| Expr[A -> B].Lambda(value: A -> B)
	| Expr[B].Apply(function: Expr[_ -> B].Lambda, argument: B)
	| Expr[A].Fix(function: Expr[A -> A].Lambda)
	;


dispatch (Expr[A]).eval -> A


fun (Expr[A].Lift).eval -> A =
	self.first.value


fun (Expr[(A, B)].Pair).eval -> (A, B) =
	(self.first.eval, self.second.eval)


fun (Expr[A -> B].Lambda).eval -> (A -> B) =
	x -> self.function(Expr.Lift(x)).eval


fun (Expr[B].Apply).eval -> B =
	self.function.eval(self.argument.eval)


fun (Expr[A].Fix).eval -> A =
	self.function.eval(Expr.Fix(self.function).eval)


fun example() -> () &io =
	factorial =
		Expr.Fix(
			Expr.Lambda(
				f =>
					Expr.Lambda(
						y =>
							y' = y.eval
							f' = f.eval

							if y' == 0 then
								Lift(1)
							else
								Lift(y' * f'(y' - 1))
					)
			)
		)

	factorial-of-ten = Expr.Apply(factorial, Expr.Lift(10))

	!print(factorial-of-ten.eval)

	()
