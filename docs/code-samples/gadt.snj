--- From [wikipedia](https://en.wikipedia.org/wiki/Generalized_algebraic_data_type)
module gadt_example_1

union Expr = EBool | EInt | Equality | Addition
union IntegerExpr = EInt | Addition
union BooleanExpr = EBool | Equality

struct EBool =
    eval: Bool

struct EInt = 
    eval: Int

struct Equality =
    left: EInt
    right: EInt

struct Addition =
    left: EInt
    right: EInt

func eval(expr: Equality) -> Bool = self.left.eval == self.right.eval
func eval(expr: Addition) -> Int = self.left.eval + self.right.eval

trait #eval =
    Output(type Self) -> type #eval
    eval(expr: Self) -> Self.Output


-------------------------------------------------------------------------------
--- GADT example: phantom types
--- From "Fun with phantom types" by R. Hinze
module

union TermInt = Zero | Succ | Pred | If[TermInt]
union TermBool = IsZero | If[TermBool]

struct Zero
struct Succ = arg: TermInt
struct Pred = arg: TermInt
struct IsZero = arg: TermInt
struct If[T] =
    condition: TermBool
    thenBranch: T
    elseBranch: T

func eval(expr: Zero) -> Int = 0
func eval(expr: Succ) -> Int = self.arg.eval + 1
func eval(expr: Pred) -> Int = self.arg.eval - 1
func eval(expr: IsZero) -> Int = self.arg.eval == 0

func eval(expr: If[T]) -> T =
    if self.condition.eval then
        self.thenBranch.eval
    else
        self.elseBranch.eval


-------------------------------------------------------------------------------
--- GADT example: higher-order abstract syntax
--- From [wikipedia](https://en.wikipedia.org/wiki/Generalized_algebraic_data_type#Higher-order_abstract_syntax)
module

struct Lift[T] =
    eval: T

struct Pair[T, U] =
    first: T
    second: U

struct Lambda[T, U] =
    function: Func[T -> U]

struct Apply[T, U] =
    function: Lambda[T, U]
    argument: U

struct Fix[T] =
    function: Lambda[T, T]

func eval(expr: Pair[T, U]) -> (T, U) =
    (self.first.eval, self.second.eval)
    
func eval(expr: Lambda[T, U]) -> Func[T -> U] =
    x => self.function(Lift(x)).eval

func eval(expr: Apply[T, U]) -> U =
    self.function.eval(self.argument.eval)

func eval(expr: Fix[T]) -> T =
    self.function.eval(Fix(self.function).eval)

func example() =
    factorial = Fix(Lambda(f => Lambda(y => Lift(if y.eval == 0 then 1 else y.eval * f.eval(y.eval - 1)))))
    io'print(factorial.eval(10))
