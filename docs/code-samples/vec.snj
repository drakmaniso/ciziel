<< Vectors >>
module vec


public --- Traits -------------------------------------------------------------


#scalar =
	trait {
		Self.Scalar: #num
	}


#vector =
	trait {
		Self: #scalar
		Self.zero: Self
		(Self).length -> Self.Scalar
		(Self).normalized -> Self
		(Self).+ (other: Self) -> Self
		(Self).- (other: Self) -> Self
		(Self).* (other: Self.Scalar) -> Self
		(Self.Scalar).* (other: Self) -> Self
	}


#vec2 =
	trait {
		Self: #scalar
		Self { x: Self.Scalar, y: Self.Scalar } -> Self
	}


#vec3 =
	trait {
		Self: #scalar
		Self { x: Self.Scalar, y: Self.Scalar, z: Self.Scalar } -> Self
	}


public --- Automatic Extensions -----------------------------------------------


V: #vector
	forall V: #vec2


V.zero: V
	forall V: #vec2
	=
    V { x = V.Scalar.zero, y = V.Scalar.zero }


(V).length -> V.Scalar
	forall V: #vec2
	=
    math.sqrt((self.x ^ 2) + (self.y ^ 2))


(V).normalized -> V
	forall V: #vec2
	=
    l = self.length
    V { x = self.x / l, y = self.y / l }


(V).+ (other: V) -> V
	forall V: #vec2
	=
    V { x = self.x + other.x, y = self.y + other.y }


(V).- (other: V) -> V
	forall V: #vec2
	=
    V { x = self.x - other.x, y = self.y - other.y }


(V).* (other: V.Scalar) -> V
	forall V: #vec2
	=
    V { x = self.x * scalar, y = self.y * scalar }


(V.Scalar) * (other: V) -> V
	forall V: #vec2
	=
    V { x = self.x * scalar, y = self.y * scalar }


public --- Concrete Types -----------------------------------------------------


<< Implement `#vector` for `Vec2` using the automatic extension: >>


Vec2 =
	struct {
		x: Float32,
		y: Float32,
	}


Vec2: #scalar #vec2 #vector


Vec2.Scalar = Float32


<< Implement `#vector` for `Polar2` manually: >>


Polar2 =
	struct {
		angle: Float32,
		length: Float32,
	}


Polar2: #scalar #vector


Polar2.Scalar = Float32


Polar2.zero = Polar2(0, 0)


(Polar2).normalized -> Polar2 =
    self.with { length = 1 }


(Polar2).+ (other: Polar2) -> Polar2 =
    ...


(Polar2).- (other: Polar2) -> Polar2 =
    ...


(Polar2).* (other: Float32) -> Polar2 =
    ...


(other: Float32).* (self: Polar2) -> Polar2 =
    ...
