<< Vectors >>
module vec


-- Traits ------------------------------------------------------------------


def #scalar = trait {
    has Self.Scalar #num
}


def #vector = trait {
    has #scalar
    has Self.zero: Self
    has (Self).length -> Self.Scalar
    has (Self).normalized -> Self
    has (Self) + (other: Self) -> Self
    has (Self) - (other: Self) -> Self
    has (Self) * (other: Self.Scalar) -> Self
    has (Self.Scalar) * (other: Self) -> Self
}


def #vec2 = trait {
    has #scalar
    has Self(
        data x: Self.Scalar,
        data y: Self.Scalar,
    )
}


def #vec3 = trait {
    has #scalar
    has Self(
        data x: Self.Scalar,
        data y: Self.Scalar,
        data z: Self.Scalar,
    )
}


-- Automatic Extensions ----------------------------------------------------


forall V #vec2
def #vector for V


forall V #vec2
def V.zero: V =
    V(x = V.Scalar.zero, y = V.Scalar.zero)


forall V #vec2
def (V).length -> V.Scalar {
    math.sqrt((self.x ^ 2) + (self.y ^ 2))
}


forall V #vec2
def (V).normalized -> V {
    let l = self.length
    V(x = self.x / l, y = self.y / l)
}


forall V #vec2
def (V) + (other: V) -> V {
    V(x = self.x + other.x, y = self.y + other.y)
}


forall V #vec2
def (V) - (other: V) -> V {
    V(x = self.x - other.x, y = self.y - other.y)
}


forall V #vec2
def (V) * (other: V.Scalar) -> V {
    V(x = self.x * scalar, y = self.y * scalar)
}


forall V #vec2
def (V.Scalar) * (other: V) -> V {
    V(x = self.x * scalar, y = self.y * scalar)
}


-- Concrete Types ----------------------------------------------------------


<< Implement `#vector` for `Vec2` using the automatic extension: >>


def Vec2 = struct {
    data x: Float32
    data y: Float32
}


def #scalar for Vec2
def Vec2.Scalar = alias Float32


def #vec2, #vector for Vec2


<< Implement `#vector` for `Polar2` manually: >>


def Polar2 = struct {
    data angle: Float32
    data length: Float32
}


def #scalar, #vector for Polar2


def Polar2.Scalar = alias Float32


def Polar2.zero = Polar2(0, 0)


def (Polar2).normalized -> Polar2 {
    self.with(length = 1)
}


def (Polar2) + (other: Polar2) -> Polar2 {
    ...
}


def (Polar2) - (other: Polar2) -> Polar2 {
    ...
}


def (Polar2) * (other: Float32) -> Polar2 {
    ...
}


def (other: Float32) * (self: Polar2) -> Polar2 {
    ...
}
