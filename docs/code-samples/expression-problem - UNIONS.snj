***
# The Expression Problem
***



module basic
public


type Literal(value: data Int)


type Addition[E](
	left: data *E,
	right: data *E,
)


trait #eval {
	fun (Self).eval -> Int
}


extend Literal as #eval


fun (Literal).eval -> Int =
	self.value


extend Addition[E #eval] as #eval


fun (Expr[E #eval].Addition).eval -> Int =
	self.left.eval + self.right.eval



-------------------------------------------------------------------------------
module extended
use basic (#eval)
public


type Negation[E](subexpr: data *E)


extend Negation[E #eval] as #eval


fun (Expr[E #eval]).eval -> Int =
	- self.subexpr.eval


trait #pretty {
	fun (Self).pretty -> String
}


forall E #pretty
extend basic::Expr[E] as #pretty


forall E #pretty
fun (basic::Expr[E]).pretty -> String =
	match self
		| basic::Expr.Literal(value) -> value.to-String
		| basic::Expr.Addition(left, right) ->
			l = self.left.pretty
			r = self.right.pretty

			case (self.left, self.right)
				| (Expr.Literal(...), Expr.Literal(...)) -> "{l} + {r}"
				| (Expr.Literal(...), _) -> "{l} + ({r})"
				| (_, Literal(...)) -> "({l}) + {r}"
				| (_, _) -> "({l}) + ({r})"
				|;
		|;


forall E #pretty
extend Expr[E] as #pretty


forall E #pretty
fun (Expr[E]).pretty -> String =
	match self
		| Expr.Negation(subexpr) -> "- ({subexpr.pretty})"
		| e: basic::Expr[E] -> e.pretty
		|;


-------------------------------------------------------------------------------
module main
use &io from /std/io
use #eval, Literal, Addition from basic
use #pretty, Negatiohn from extended
public


type Expr =
	 | Literal
	 | Addition[Expr]
	 | Negation[Expr]
	 ;


dispatch Expr as #eval
dispatch Expr as #pretty


***
This will automatically define the following methods:

	fun (Expr).eval -> Int =
		match self
			| Expr.Literal(value)  -> value
			| Expr.Addition(left, right) -> left.eval + right.eval
			| Expr.Negation(subexpr) -> - subexpr.eval
			|;


	fun (Expr).pretty -> String =
		match self
			| Expr.Literal(value) -> value.pretty
			| Expr.Addition(left, right) ->
			|;
***


fun main() -> () &io =
	e1 = Expr.Addition(
		Expr.Literal(77),
		Expr.Negation( Expr.Literal(12) )
	)
	print("{e1.pretty} = {e1.eval}")


-------------------------------------------------------------------------------
module main
use &io from /std/io
use #eval from basic
use #pretty from extended
public


type Expr =
	| as extended::Expr[Expr]
	|;
extend Expr as #eval
extend Expr as #pretty


-------------------------------------------------------------------------------
module main
use &io from /std/io
use #eval from basic
use #pretty from extended
public


alias Expr = extended::Expr[Expr]


fun main() -> () &io =
	e1 = Expr.Addition(Expr.Literal(77), Expr.Negation(Expr.Literal(12)))
	print("{e1.pretty} = {e1.eval}")
