trait #setoid =
    (Self).equals(other: Self) -> Bool

trait #ord =
    #ord
    (Self).lte(other: Self) -> Bool

---

trait #semigroupoid =
    (Self[I, J]).compose(other: Self[J, K]) -> Self[I, K]

trait #category =
    #semigroupoid
    Self[A, A]'id() -> Self[A, A]

---

trait #semigroup =
    (Self).concat(other: Self) -> Self

trait #monoid =
    #semigroup
    Self'empty() -> Self

trait #group =
    #monoid
    (Self).invert -> Self

---

trait #filterable =
    (Self[A]).filter(test: A -> Bool) -> Self[A]

---

trait #contravariant =
    (Self[A]).contramap(operation: B -> A) -> Self[B]

---

trait #functor =
    (Self[A]).map(operation: A -> B) -> Self[B]

trait #apply =
    #functor
    (Self[A]).ap(Self[A -> B]) -> Self[B]

trait #applicative =
    #apply
    Self[A]'of(value: A) -> Self[A]

trait #alt =
    #functor
    (Self[A]).alt(other: Self[A]) -> Self[A]

trait #plus =
    #alt
    Self[A]'zero() -> Self[A]

trait #alternative =
    #applicative
    #plus

trait #foldable =
    (Self[A]).reduce(operation: (B, A) -> B, init: B) -> B

trait #traversable =
    #functor
    #foldable
    (Self[A]).traverse(operation: A -> F[B] #applicative) -> F[Self[B]]

trait #chain =
    #apply
    (Self[A]).chain(operation: A -> Self[B]) -> Self[B]

trait #chain-rec =
    #chain
    Self[_]'chain-rec(operation: (A -> C, B -> C, A) -> Self[C], init: A) -> Self[B]
        --what???

trait #monad =
    #applicative
    #chain

trait #extend =
    #functor
    (Self[A]).extend(operation: Self[A] -> B) -> Self[B]

trait #comonad =
    #extend
    (Self[A]).extract -> A

trait #bifunctor =
    #functor
    (Self[A, C]).bimap(operation-1: A -> B, operation-2: C -> D) -> Self[B, D]

trait #profunctor =
    #functor
    (Self[B, C]).promap(operation-1: A -> B, operation-2: C -> D) -> Self[A, D]
