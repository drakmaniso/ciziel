trait #setoid {
	fun (Self).equals(other: Self) -> Bool
}


trait #ord {
	trait #setoid
	fun (Self).lte(other: Self) -> Bool
}


-------------------------------------------------------------------------------


trait #semigroupoid {
	fun (Self[I, J]).compose(other: Self[J, K]) -> Self[I, K]
}


trait #category {
	trait #semigroupoid
	fun Self[A, A].id() -> Self[A, A]
}


-------------------------------------------------------------------------------


trait #semigroup {
	fun (Self).concat(other: Self) -> Self
}


trait #monoid {
	trait #semigroup
	val Self.empty -> Self
}


trait #group {
	trait #monoid
	fun (Self).invert -> Self
}


-------------------------------------------------------------------------------


trait #filterable {
	fun (Self[A]).filter(test: A -> Bool) -> Self[A]
}


-------------------------------------------------------------------------------


trait #contravariant {
	fun (Self[A]).contramap(operation: B -> A) -> Self[B]
}


-------------------------------------------------------------------------------


trait #functor {
	fun (Self[A]).map(operation: A -> B) -> Self[B]
}


trait #apply {
	trait #functor
	fun (Self[A]).ap(Self[A -> B]) -> Self[B]
}


trait #applicative {
	trait #apply
	fun Self[A].of(value: A) -> Self[A]
}


trait #alt {
	trait #functor
	fun (Self[A]).alt(other: Self[A]) -> Self[A]
}


trait #plus {
	trait #alt
	val Self[A].zero -> Self[A]
}


trait #alternative {
	trait #applicative
	trait #plus
}


trait #foldable {
	fun (Self[A]).reduce(operation: (B, A) -> B, init: B) -> B
}


trait #traversable {
	trait #functor
	trait #foldable
	forall F #applicative
	fun (Self[A]).traverse(operation: A -> F[B]) -> F[Self[B]]
}


trait #chain {
	trait #apply
	fun (Self[A]).chain(operation: A -> Self[B]) -> Self[B]
}


trait #chain-rec {
	trait #chain
	fun Self[_].chain-rec(operation: (A -> C, B -> C, A) -> Self[C], init: A) -> Self[B]
	 	-- what???
}


trait #monad {
	trait #applicative
	trait #chain
}


trait #extend {
	trait #functor
	fun (Self[A]).extend(operation: Self[A] -> B) -> Self[B]
}


trait #comonad {
	trait #extend
	fun (Self[A]).extract -> A
}


trait #bifunctor {
	trait #functor
	fun (Self[A, C]).bimap(operation-1: A -> B, operation-2: C -> D) -> Self[B, D]
}


trait #profunctor {
	trait #functor
	fun (Self[B, C]).promap(operation-1: A -> B, operation-2: C -> D) -> Self[A, D]
}
