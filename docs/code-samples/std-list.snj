module /std/lists


use #iterator, #iterable from /std


-------------------------------------------------------------------------------


given A
def List[A] =
	| Empty[A]
	| ref Link[A]


given A
def Empty[A] = data record


given A
def Link[A] =
	data record {
		head: A
		tail: List[A]
	}


given A
def List[A].new(...items: Array[A]) -> List[A] =
    items.fold-reverse(
		Empty,
        (item, list) ->
            Link { head = item, tail = list }
	)


-- Equality -------------------------------------------------------------------


given A: #eq
def #eq for List[A]


given A: #eq
def (l: List[A]) == (l: List[A]) -> Bool


def (e: Empty) == (other: Empty) -> Bool =
	True


given A
def (e: Empty) == (other: List[A]) -> Bool =
	False


given A
def (l: Link[A]) == (other: Empty) -> Bool =
	False


given A: #eq
def (l: Link[A]) == (other: Link[A]) -> Bool =
	if l.head == other.head then
		l.tail == other.tail
	else
		False


given A: #eq
def (l: List[A]) == (other: List[A]) -> Bool =
	match (self, other)
	when (Empty, Empty) then
		True
	when (a: Link, b: Link) then
		(a.head == b.item) and (a.tail == b.tail)
	else
		False


-- Pushing and Poping ---------------------------------------------------------


given A
def (List[A]).push(item: A) -> Link[A] =
    Link { head = item, tail = self }


given A
def (List[A]).head -> Option[A]


given A
def (Empty[A]).head -> None =
	None


given A
def (List[A]).tail -> List[A]


given A
def (Empty[A]).tail -> Empty[A] =
	Empty


-- Functor Implementation -----------------------------------------------------


def #functor for List[A]
def #functor for Empty[A]
def #functor for Link[A]


given A, B
def (List[A]).map(transform: A -> B) -> List[B]


given A, B
def (Empty[A]).map(transform: A -> B) -> List[B].Empty =
    Empty


given A, B
def (Link[A]).map(transform: A -> B) -> List[B].Link =
    Link {
        head = transform(self.head),
        tail = self.tail.map(transform),
	}


-------------------------------------------------------------------------------


def #concat for List[A]


def (List[A]) ++ (other: List[A]) -> List[A] =
	match self
	when Empty then
		other
	else when Link { head, tail } then
		Link {
			head = head,
			tail = tail ++ list-2
		}


def #flatten for List[A]


def (List[List[A]]).flatten -> List[A] =
	match self
	when Empty then
		Empty
	else when Link { head, tail } then
		head ++ tail.flatten


def #monad[A] for List[A]


def List[A].wrap(value: A) -> List[A] =
	Link { head = A, tail = Empty }


def (List[A]).and-then(operation: A -> List[B]) -> List[B] =
	self.map(operation).flatten


-- Iterator Implementation ----------------------------------------------------


def #iterable for List[A]


def List-Iterator[A] =
	record {
		current: List[A]
	}


def List[A].Iterator = List-Iterator[A]


def (List[A]).iterator -> List-Iterator[A] =
    List-Iterator { current = self }


def #iterator for List-Iterator[A]


def List-Iterator[A].Item = A


def (List-Iterator[A]).peek -> Option[A] =
    self.current.head


def (List-Iterator[A]).next -> List-Iterator[A] =
	match self.current
	when Empty then
		self
	else when Link { tail, ... } then
		self.with { current = tail }


-- Test -----------------------------------------------------------------------


module test


use &io from /std/io
use List from /std/list


let double(list: List[Int]) -> List[Int] =
    list.map(___ * 2)


let example() -> Nil / Io =
	let a = Link(1, Link(2, Link(3, Empty)))
	let b = List.new(1, 2, 3)

	do Io.print(a.Type)
	-- Link[Int]

	do Io.print(b.Type)
	-- List[Int]

	do Io.print(a.map.Type))
	-- (Link[Int], Int -> A) -> Link[A]

	Nil