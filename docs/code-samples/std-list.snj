module /std/lists


use #iterator, #iterable from /std


public ------------------------------------------------------------------------


type List[A] =
	| Empty[A]
	| ref Link[A] {
		head: data A
		tail: data List[A]
	}
	|;


type alias Empty = List[_].Empty
type alias Link[A] = List[A].Link


fun List[A].new(...items: Array[A]) -> List[A] =
    items.fold-reverse(
		List.Empty,
        (item, list) ->
            List.Link { head = item, tail = list }
	)


public --- Equality -----------------------------------------------------------


extend List[#eq] as #eq


forall A #eq
fun (List[A]) == (other: List[A]) -> Bool =
	match (self, other)
		| (List.Empty, List.Empty) ->
			True

		| (a: List.Link, b: List.Link) ->
			(a.head == b.item) and (a.tail == b.tail)

		| (_, _) ->
			False
		|;


public --- Pushing and Poping -------------------------------------------------


fun (List[A]).push(item: A) -> List[A].Link =
    List.Link { head = item, tail = self }


auto fun (List[A]).head -> Option[A]
fun (List[A].Empty).head -> None =
	None


auto fun (List[A]).tail -> List[A]
fun (List[A].Empty).tail -> List[A].Empty =
	List.Empty


public --- Functor Implementation ---------------------------------------------


extend List[A] as #functor
extend List[A].Empty as #functor
extend List[A].Link as #functor


auto fun (List[A]).map(transform: A -> B) -> List[B]


fun (List[A].Empty).map(transform: A -> B) -> List[B].Empty =
    List.Empty


fun (List[A].Link).map(transform: A -> B) -> List[B].Link =
    List.Link {
        head = transform(self.head),
        tail = self.tail.map(transform),
	}


public ------------------------------------------------------------------------


extend List[A] as #concat


fun (List[A]) ++ (other: List[A]) -> List[A] =
	match self
		| List.Empty ->
			other
		| List.Link { head, tail } ->
			List.Link {
				head = head,
				tail = tail ++ list-2
			}
		|;


extend List[A] as #flatten


fun (List[List[A]]).flatten -> List[A] =
	match self
		| List.Empty -> List.Empty
		| List.Link { head, tail } ->
			head ++ tail.flatten
		|;


extend List[A] as #monad[A]


fun (List[A]).and-then(operation: A -> List[B]) -> List[B] =
	self.map(operation).flatten


public --- Iterator Implementation --------------------------------------------


extend List[A] as #iterable


type List[A].Iterator {
	current: List[A]
}


fun (List[A]).iterator -> List[A].Iterator =
    List.Iterator { current = self }


extend List[A].Iterator as #iterator


type List[A].Iterator.Item = A


fun (List[A].Iterator).peek -> Option[A] =
    self.current.head


fun (List[A].Iterator).next -> List[A].Iterator =
    match self.current
		| List.Empty -> self
		| List.Link { tail, ... } ->
			self.with { current = tail }
		|;


local ["test"] ----------------------------------------------------------------


use &io from /std/io
use List from /std/list


fun double(list: List[Int]) -> List[Int] =
    list.map(-> ___ * 2)


fun example() -> Void &io =
	a = List.Link(1, List.Link(2, List.Link(3, List.Empty)))
	b = List.new(1, 2, 3)

	!print(a.Type)
	-- Link[Int]

	!print(b.Type)
	-- List[Int]

	!print(a.map.Type))
	-- (Link[Int], Int -> A) -> Link[A]

	Void
