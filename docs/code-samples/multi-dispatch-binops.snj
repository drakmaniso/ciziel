/* Multiple dispatch using custom binary operators */


--- Simple Version: Non-generic `encounter` -----------------------------------


module cats-and-dogs

public

struct Cat { name: data String }
struct Dog { name: data String }

fun (Cat).<meets> (other: Cat) -> String = "slinks"
fun (Cat).<meets> (other: Dog) -> String = "hisses"
fun (Dog).<meets> (other: Dog) -> String = "sniffs"
fun (Cat).<meets> (other: Cat) -> String = "chases"


module birds
use cats-and-birds (Cat, Dog)

public

struct Bird { name: data String }

fun (Bird).<meets> (other: Bird) -> String = "chirps"
fun (Bird).<meets> (other: Cat) -> String = "chirps"
fun (Bird).<meets> (other: Dog) -> String = "chirps"
fun (Cat).<meets> (other: Bird) -> String = "hunts"
fun (Dog).<meets> (other: Bird) -> String = "barks"


module usage
use cats-and-dogs (Cat, Dog)
use birds (Bird)

public

type Pet = Cat | Dog | Bird

fun encounter(a: Pet, b: Pet) -> String =
    verb = a <meets> b
    "{a.name} meets {b.name} and {verb}"


fun example-encounter() -> Void &io =
	do
		pets =
			Array(
				Cat("Spot"),
				Dog("Fido"),
				Bird("Coco"),
			)

		pets.foreach(a =>
			pets.foreach(b =>
				print(encounter(a, b))
			)
		)
		--- Spot meets Spot and slinks
		--- Spot meets Fido and hisses
		--- Spot meets Coco and hunts
		--- Fido meets Spot and chases
		--- Fido meets Fido and sniffs
		--- Fido meets Coco and barks
		--- Coco meets Spot and chirps
		--- Coco meets Fido and chirps
		--- Coco meets Coco and chirps
	end


--- Using Traits: Generic `encounter` -----------------------------------------


module pets

public

trait #pet {
    (Self).name -> String
    (Self).<meets> (other: Self) -> String
}

forall P #pet
fun encounter(a: P, b: P) -> String =
    verb = a <meets> b
    "{a.name} meets {b.name} and {verb}"


module cats-and-dogs
use pets (#pet)

public

type Usual-Pet = Cat | Dog
struct Cat { name: data String }
struct Dog { name: data String }

tag Usual-Pet #pet
tag Cat #pet
tag Dog #pet

fun (Cat).<meets> (other: Cat) -> String = "slinks"
fun (Cat).<meets> (other: Dog) -> String = "hisses"
fun (Dog).<meets> (other: Cat) -> String = "chases"
fun (Dog).<meets> (other: Dog) -> String = "sniffs"


module birds
use pets (#pet)
use cats-and-dogs (Cat, Dog)

public

type Exotic-Pet = Cat | Dog | Bird
struct Bird { name: data String }

tag Exotic-Pet #pet
tag Bird #pet

fun (Bird).<meets> (other: Cat) -> String { "chirps" }
fun (Bird).<meets> (other: Dog) -> String { "chirps" }
fun (Bird).<meets> (other: Bird) -> String { "chirps" }
fun (Cat).<meets> (other: Bird) -> String { "hunts" }
fun (Dog).<meets> (other: Bird) -> String { "barks" }


module usage
use pets (#pet)
use cats-and-dogs (Cat, Dog)
use exotic-pets (Bird)

public

fun main() -> Void &io =
	do
		pets =
			Array(
				Cat("Spot"),
				Dog("Fido"),
				Bird("Coco"),
			)

		pets.foreach(a =>
			pets.foreach(b =>
				print(encounter(a, b))
			)
		)
		--- Spot meets Spot and slinks
		--- Spot meets Fido and hisses
		--- Spot meets Coco and hunts
		--- Fido meets Spot and chases
		--- Fido meets Fido and sniffs
		--- Fido meets Coco and barks
		--- Coco meets Spot and chirps
		--- Coco meets Fido and chirps
		--- Coco meets Coco and chirps
	end
