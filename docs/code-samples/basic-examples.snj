module main --- Some Simple Examples ------------------------------------------


import /std/io(&io)


public ------------------------------------------------------------------------


fun main() -> Nil &io =
	fun get-number() =
		do io.put-string("Please enter a number: ")
		answer = io.input()

		case answer.to-int
		of Some(n) then
			Io(n)
		of None then
			get-number()
		end

	number = get-number()
	naive = naive-factorial(number)
	tail = tail-factorial(number)
	folded = folded-factorial(number)

	do io.print("naive factorial: {naive}")
	do io.print("tail recursive factorial: {tail}")
	do io.print("fold-based factorial: {folded}")

	Nil


private --- Various Implementations of Factorial ------------------------------


fun naive-factorial(n) =
	if n <= 1 then
		1
	else
		n * naive-factorial(n - 1)


fun tail-factorial(n: Int) -> Int =
	fun step(n, accum) =
		if n <= 1 then
			accum
		else
			step(n - 1, n * accum)

	step(n, 1)


fun fold-factorial(n: Int) -> Int =
	(2 <upto> n).fold(1, Int.*)


forall N #num
fun generic-tail-factorial(number: N) -> N =
	fun step(num, accum) =
		if num <= N.one then
			accum
		else
			step(num - N.one, num * accum)

	step(number, N.one)


forall N #num #range
fun generic-fold-factorial(number: N) -> N =
	(N.one <upto> number).fold(N.one, N.*)


private --- A few Other Algorithms --------------------------------------------


fun gcd(a: Int, b: Int) -> Int =
	require a > 0
	require b > 0
	ensure result > 0

	a' = (a, b).max
	b' = (a, b).min

	if b' == 0 then
		a'
	else
		gcd(b', a' <mod> b')


fun fibonacci(n: Int) -> Int =
	require n > 0
	ensure result > 0

	fun step(n, previous, current) =
		if n == 0 then
			current
		else
			step(n - 1, current, previous + current)

	step(n, 1, 1)


private --- An Example of Method-Chaining -------------------------------------


fun pipeline-example-1() =
	my-array = Array(1, 2, 3, 4, 5, 6, 7)

	my-array
		.iterator
		.filter(=> ___.is-even)
		.map(=> ___ * 2)
		.fold("", (s, n) => "{s}, {n <to> String}")
		.map(char =>
				next-char = (char.code + 1) <to> Char

				if next-char.is-letter then
					next-char.to-uppercase
				else
					Rune "?" )
		<collect> Array


fun pipeline-example-2() =
	names = Array("Judy", "Mary", "Jane", "", "Bop")

	names
		.iterator
		.map(=> ___.to-lowercase)
		.filter(=> ___.length > 0)
		.filter(=> ___.test-all(=> ___.is-alpha))
		.map(=>
			case ___
			of "Bop" then "Betty"
			of n and n.length > 100 then "(too long)"
			of n then n
			end )
		.fold("", (string, name) =>
			if string.length > 0 then
				string ++ ", " ++ name
			else
				string ++ name )
