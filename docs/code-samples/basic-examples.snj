<< Some Simple Examples >>
module main
use /std/io(&io)


public ------------------------------------------------------------------------


main() -> Nil &io =
	do
		get-number() =
			do
				io.put-string("Please enter a number: ")
				answer = io.input()

				case answer.to-int
				of Some(number) then
					number
				of None then
					get-number()
				end
			end

		number = get-number()
		naive = naive-factorial(number)
		tail = tail-factorial(number)
		folded = folded-factorial(number)

		io.print("naive factorial: {naive}")
		io.print("tail recursive factorial: {tail}")
		io.print("fold-based factorial: {folded}")
	end


private --- Various Implementations of Factorial ------------------------------


naive-factorial(n) =
	if n <= 1 then
		1
	else
		n * naive-factorial(n - 1)
	end


tail-factorial(n: Int) -> Int =
	step(n, accum) =
		if n <= 1 then
			accum
		else
			step(n - 1, n * accum)
		end

	step(n, 1)


fold-factorial(n: Int) -> Int =
	(2 <upto> n).fold(1, Int.*)


generic-tail-factorial(number: N) -> N
	forall N: #num
	=
	step(num, accum) =
		if num <= N.one then
			accum
		else
			step(num - N.one, num * accum)
		end

	step(number, N.one)


generic-fold-factorial(number: N) -> N
	forall N: #num #range
	=
	(N.one <upto> number).fold(N.one, N.*)


private --- A few Other Algorithms --------------------------------------------


gcd(a: Int, b: Int) -> Int
	require a > 0 and b > 0
	ensure result > 0
	=
	a' = (a, b).max
	b' = (a, b).min

	if b' == 0 then
		a'
	else
		gcd(b', a' <mod> b')
	end


fibonacci(n: Int) -> Int
	require n > 0
	ensure result > 0
	=
	step(n, previous, current) =
		if n == 0 then
			current
		else
			step(n - 1, current, previous + current)
		end

	step(n, 1, 1)


private --- An Example of Method-Chaining -------------------------------------


pipeline-example-1() =
	my-array = Array(1, 2, 3, 4, 5, 6, 7)

	my-array
		.iterator
		.filter(=> ___.is-even)
		.map(=> ___ * 2)
		.fold("", (s, n) => "{s}, {n <to> String}")
		.map(
			char =>
				next-char = (char.code + 1) <to> Char

				if next-char.is-letter then
					next-char.to-uppercase
				else
					Rune "?"
				end
		)
		<collect> Array


pipeline-example-2() =
	names = Array("Judy", "Mary", "Jane", "", "Bop")

	names
		.iterator
		.map(=> ___.to-lowercase)
		.filter(=> ___.length > 0)
		.filter(=> ___.test-all(=> ___.is-alpha))
		.map(
			name =>
				case
				of name == "Bop" then
					"Betty"
				of name.length > 100 then
					"(too long)"
				else
					name
				end
		)
		.fold(
			"",
			(string, name) =>
				if string.length > 0 then
					string ++ ", " ++ name
				else
					string ++ name
				end
		)
