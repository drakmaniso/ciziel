<<
Original code, in OCaml:

```ocaml

let rec stack_or_reduce lex stack = match lex , stack with
     Lint n ,  _      ->  (Texp (ExpInt n))::stack
   | Lident v ,  _    ->  (Texp (ExpVar v))::stack
   | Lstring s , _    ->  (Texp (ExpStr s))::stack
   | Lsymbol "(" , _  ->  Tlp::stack
   | Lsymbol ")" , (Texp e)::Tlp::st  ->  (Texp e)::st
   | Lsymbol ")" , _ -> stack_or_reduce lex (reduce 0 stack)
   | Lsymbol s , _
        -> let symbol =
             if s<>"-" then tsymb s
             (* remove the ambiguity of the ``-'' symbol           *)
             (* according to the last exp element put on the stack *)
             else match stack
                  with (Texp _)::_  ->  Tbin MINUS
                                | _ ->  Tunr UMINUS
           in ( match symbol with
                  Tunr op  ->  (Tunr op)::stack
                | Tbin op  ->
                    ( try stack_or_reduce lex (reduce (priority_binop op)
                                               stack )
                      with ParseError -> (Tbin op)::stack )
                | _ -> raise ParseError )
   | _ , _ -> raise ParseError ;;

```
>>

def stack-or-reduce(lex, stack) =
	match (lex, stack)
	case (Lint(n?), ?) then Ok(stack ++ Texp(ExpInt(n)))
	case (Lident(v?), ?) then Ok(stack ++ Texp(ExpVar(v)))
	case (Lstring(s?), ?) then Ok(stack ++ Texp(ExpStr(s)))
	case (Lsymbol("("), ?) then Ok(stack ++ Tlp)
	case (Lsymbol(")"), Array(..., Tlp, Texp(e?)) then Ok(stack ++ Texp(e)))
	case (Lsymbol(")"), ?) then stack-or-reduce(lex, reduce(0, stack))
	case (Lsymbol(s?), ?) then
		let symbol =
			if s != "-" then
				tsymb(s)
				-- remove the ambiguity of the ``-'' symbol
				-- according to the last exp element put on the stack
			else
				match stack
				case Array(..., Texp(?)) then Tbin(minus)
				else ? then Tunr(uminus)
		in
		match symbol
		case Tunr(op?) then Ok(stack ++ Tunr(op))
		case Tbin(op?) then
			stack-or-reduce(lex, reduce(priority-binop(op), stack))
				.unwrap-or(stack ++ Tbin(op))
		else ? then Err(ParseError)
	else ? then Err(ParseError)


-- More idiomatic:


def stack-or-reduce(lex, stack) =
	match lex
	case Lex.Int(n?) then
		Ok(stack ++ Term.Exp(Exp.Int(n)))

	case Lex.Ident(v?) then
		Ok(stack ++ Term.Exp(Exp.Var(v)))

	case Lex.String(s?) then
		Ok(stack ++ Term.Exp(Exp.Str(s)))

	case Lex.Symbol("(") then
		Ok(stack ++ Term.LPar)

	case Lex.Symbol(")") then
		match stack
		case Array(..., Term.LPar, Term.Exp(e?)) then
			Ok(stack ++ Term.Exp(e)))
		else ? then
			stack-or-reduce(lex, reduce(0, stack))

	case Lex.Symbol(s) then
		-- remove the ambiguity on the `-` symbol
		-- according to the last exp element put on the stack
		let symbol =
			if s == "-" then
				match stack
				case Array(..., Term.Exp(?)) then Term.Bin(minus)
				else ? then Term.Unr(uminus)
			else
				tsymb(s)
		in
		match symbol
		case Term.Unr(op?) then
			Ok(stack ++ Term.Unr(op))
		case Term.Bin(op?) then
			stack-or-reduce(lex, reduce(priority-binop(op), stack))
				.unwrap-or(stack ++ Term.Bin(op))
		else ? then
			Err(Parse-Error)

	else ? then
		Err(Parse-Error)


-- More uniform:


def stack-or-reduce(lex, stack) =
	match lex
	case Lex.Int(n?) then
		Ok(stack ++ Term.Exp(Exp.Int(n)))

	case Lex.Ident(v?) then
		Ok(stack ++ Term.Exp(Exp.Var(v)))

	case Lex.String(s?) then
		Ok(stack ++ Term.Exp(Exp.Str(s)))

	case Lex.Symbol("(") then
		Ok(stack ++ Term.LPar)

	case Lex.Symbol(")") then
		match stack
		case Array(..., Term.LPar, Term.Exp(e?)) then
			Ok(stack ++ Term.Exp(e?)))
		else ? then
			stack-or-reduce(lex, reduce(0, stack))

	case Lex.Symbol(s) then
		-- remove the ambiguity on the `-` symbol
		-- according to the last exp element put on the stack
		let symbol =
			if s == "-" then
				match stack
				case Array(..., Term.Exp(?)) then
					Term.Bin(minus)
				else ? then
					Term.Unr(uminus)
			else
				tsymb(s)
		in
		match symbol
		case Term.Unr(op) then
			Ok(stack ++ Term.Unr(op))
		case Term.Bin(op) then
			stack-or-reduce(lex, reduce(priority-binop(op), stack))
				.unwrap-or(stack ++ Term.Bin(op))
		else ? then
			Err(Parse-Error)

	else ? then
		Err(Parse-Error)
