--   let rec stack_or_reduce lex stack = match lex , stack with
--      Lint n ,  _      ->  (Texp (ExpInt n))::stack
--    | Lident v ,  _    ->  (Texp (ExpVar v))::stack
--    | Lstring s , _    ->  (Texp (ExpStr s))::stack
--    | Lsymbol "(" , _  ->  Tlp::stack
--    | Lsymbol ")" , (Texp e)::Tlp::st  ->  (Texp e)::st
--    | Lsymbol ")" , _ -> stack_or_reduce lex (reduce 0 stack)
--    | Lsymbol s , _
--         -> let symbol =
--              if s<>"-" then tsymb s
--              (* remove the ambiguity of the ``-'' symbol           *)
--              (* according to the last exp element put on the stack *)
--              else match stack
--                   with (Texp _)::_  ->  Tbin MINUS
--                                 | _ ->  Tunr UMINUS
--            in ( match symbol with
--                   Tunr op  ->  (Tunr op)::stack
--                 | Tbin op  ->
--                     ( try stack_or_reduce lex (reduce (priority_binop op)
--                                                stack )
--                       with ParseError -> (Tbin op)::stack )
--                 | _ -> raise ParseError )
--    | _ , _ -> raise ParseError ;;


fun stack-or-reduce(lex, stack) =
	case (lex, stack)
	of (Lint(n), _) then Ok(stack ++ Texp(ExpInt(n)))
	of (Lident(v), _) then Ok(stack ++ Texp(ExpVar(v)))
	of (Lstring(s), _) then Ok(stack ++ Texp(ExpStr(s)))
	of (Lsymbol("("), _) then Ok(stack ++ Tlp)
	of (Lsymbol(")"), Array(..., Tlp, Texp(e)) then Ok(stack ++ Texp(e)))
	of (Lsymbol(")"), _) then stack-or-reduce(lex, reduce(0, stack))
	of (Lsymbol(s), _) then
		symbol =
			if s != "-" then
				tsymb(s)
				-- remove the ambiguity of the ``-'' symbol
				-- according to the last exp element put on the stack
			else
				case stack
				of Array(..., Texp(_)) then Tbin(minus)
				else Tunr(uminus)
		case symbol
		of Tunr(op) then Ok(stack ++ Tunr(op))
		of Tbin(op) then
			stack-or-reduce(lex, reduce(priority-binop(op), stack))
				.unwrap-or(stack ++ Tbin(op))
		else Error(ParseError)
	else Error(ParseError)


-- Simplification:


fun stack-or-reduce(lex, stack) =
	case lex
	of Lint(n) then Ok(stack ++ Texp(ExpInt(n)))
	of Lident(v) then Ok(stack ++ Texp(ExpVar(v)))
	of Lstring(s) then Ok(stack ++ Texp(ExpStr(s)))
	of Lsymbol("(") then Ok(stack ++ Tlp)
	of Lsymbol(")") then
		if stack is Array(..., Tlp, Texp(e)) then Ok(stack ++ Texp(e)))
		else stack-or-reduce(lex, reduce(0, stack))
	of Lsymbol(s) then
		-- remove the ambiguity of the `-` symbol
		-- according to the last exp element put on the stack
		symbol =
			if s == "-" then
				case stack
				of Array(..., Texp(_)) then Tbin(minus)
				else Tunr(uminus)
			else tsymb(s)
		case symbol
		of Tunr(op) then Ok(stack ++ Tunr(op))
		of Tbin(op) then
			stack-or-reduce(lex, reduce(priority-binop(op), stack))
				.unwrap-or(stack ++ Tbin(op))
		else Error(ParseError)
	else Error(ParseError)
