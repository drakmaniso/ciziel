module std::ops


def #add {
    has ::Other
    has ::Output
    has + (other: Self.Other) -> Self.Output
}


def #zero =
    has #add
    has Self.zero: Self


def #mul =
    has Self.Other
    has Self.Output
    has (Self) * (other: Self.RightHand) -> Self.Output
    has (other: Self.Other) * (Self) -> Self.Output

def #one =
    has #mul
    has Self.one: Self


-------------------------------------------------------------------------------


module vec


use std::ops (#add, #mul)


def Vec2 =
    struct(
        x: Float,
        y: Float,
    )


def Vec2 as #add

def Vec2#add.Other = alias Vec2

def Vec2#add.Output = alias Vec2

def (Vec2) + (other: Vec2) -> Vec2 =
    Vec2(self.x + other.x, self.y + other.y)

def (other: Vec2) + (Vec2) -> Vec2 =
    Vec2(other.x + self.x, other.y + self.x)


def Vec2 as #zero

def Vec2.zero = Vec2(0, 0)


def Vec2 as #mul

def Vec2#mul.Other = alias Float

def Vec2#mul.Output = alias Vec2

def (Vec2) * (other: Float) -> Vec2 =
    Vec2(self.x * other, self.y * other)

def (other: Float) * (Vec2) -> Vec2 =
    Vec2(other * self.x, other * self.y)
