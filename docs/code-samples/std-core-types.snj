module /std


-------------------------------------------------------------------------------


def () = __Unconstructible__


-------------------------------------------------------------------------------


def Bool = False | True
def False = record
def True = record


-------------------------------------------------------------------------------


given A
def #functor[A] =
	has Self[A]
	has (Self[A]).map(transform: A -> B) -> Self[B]


given A
def #monad[A] =
	has Self[A]
	has Self[A].wrap(item: A) -> Self[A]
	has (m: Self[A]).and-then(operation: A -> Self[B]) -> Self[B]


-------------------------------------------------------------------------------


given A
def Option[A] = None | Some[A]


def None


given A
def Some[A](item: data A)


given A
def Option[A] as #functor[A]


given A
def (Option[A]).map(transform: A -> B) -> Option[B] =
	match self
	when Some(item) then
		Some(transform(item))
	else when None then
		None


given A
def Option[A] as #monad[A]


given A
fun Option[A].wrap(item: A) -> Option[A] =
	Some(item)


given A
def (Option[A]).and-then(operation: A -> Option[B]) -> Option[B] =
	match self
	when Some(item) then
		operation(item)
	else when None then
		None


given A
def (Option[A]) as Result[A, None] =
	match self
	when Some(item) then
		Ok(item)
	else when None then
		Err(None)


given A
def (Result[A, None]) as Option[A] =
	match self
	when Ok(item) then
		Some(item)
	else when Err(None) then
		None


given A
def Option[A] as #unwrap[A, None]


given A
def (Option[A]).unwrapped -> Result[A, None] =
	match self
	when Some(item) then
		Ok(item)
	else when None then
		Err(None)


given A
def (Option[A]).ok-or(error: E) -> Result[A, E] =
	match self
	when Some(item) then
		Ok(item)
	else when None then
		Err(error)


-------------------------------------------------------------------------------


given A, E: #error
def Result[A, E] = Ok[A] | Err[E]


given A
def Ok[A](item: data A)


given E: #error
def Err[E](error: data E)


given A
def #functor[A] for Result[A, _]


given A, B, E: #error
def (Result[A, E]).map(transform: A -> B) -> Result[B, E] =
	match self
	when Ok(item) then
		Ok(transform(item))
	else when Err(e) then
		Err(e)


given A
def #monad[A] for Result[A, _]


given A, E: #error
def Result[A, E].ok(item: A) -> Result[A, E] =
	Ok(item)


given A, B, E: #error
def (Result[A, E]).and-then(operation: A -> Result[B, E]) -> Result[B, E] =
	match self
	when Ok(item) then
		operation(item)
	else when Err(e) then
		Err(e)


given A
def #unwrap[A] for Result[A, _]


given A, E: #error
def (Result[A, E]).unwrapped -> Result[A, E] =
	self
