def #any {
    has .Type -> #type
}


---


def #to-string {
    has .to-string -> String
}


def #from-string {
    has ::from-string(s: String) -> Self
}


---


def #parse {
    has ::parse(String) -> Self
}


def #show {
    has .show -> String
}


def #format {
    has ::format-size(config: Format-Config) -> Size
    has .format(config: Format-Config, buffer: String) -> String
}


---


def #iterable {
    has ::Iterator #iterator
    has .iter -> Self::Iterator
}


def #iterator {
    has ::Item
    has .next -> (Self, Option[Self::Item])
}


---


def #functor[A] {
    has .map(transform: Fun(A) -> B) -> Self[B]
}


def #fold[A] {
    has .fold(initial: B, operation: Fun(B, A) -> B) -> B
}


def #unfold[A] {
    has ::unfold(initial: B, operation: Fun(B) -> Option[(A, B)]) -> Self[A]
}


def #monad[A] {
    has ::wrap(item: A)
    has .chain(operation: Fun(A) -> Self[B]) -> Self[B]
}