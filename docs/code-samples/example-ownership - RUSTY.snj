module ownership-examples


struct Book {
    title: String,
    author: String,
    pages: Int32,
    content: String,
}


struct Library {
    owner: String,
    books: Array[Book],
}


struct Selection {
    owner: String,
    books: Array[lent Book],
}


let example-1() -> () {
    my-book = Book {
        title = "sdfsd",
        pages = 432,
        author = "adfaas",
    }
}


for Book {
    let .rename(new-title: String) -> Book {
        self.with(title = new-title)
    }
}


let longest(book1: lent Book, book2: lent Book) -> lent Book from (book1, book2) {
    if book1.pages >= book2.pages {
        book1
    } else {
        book2
    }
}


for Library {
    def .add(book: Book) ->  Library {
        let new-books = self.books.push(book)
        self.with(books: new-books)
    }
}


for Selection {
    let .add(book: lent Book) -> Selection from book {
        let new-books = self.books.push(book)
        self.with(books = new-books)
    }
}


let example-add-book() -> () {
    -- Creating a unique library of unique books:
    my-library = Library(owner = "Myself", books = Array(...))
    -- my-library: Library

    -- Creating a unique selection of shared books:
    my-selection = Selection(owner: "Myself", books: &my-library.books[0 to 10])
    -- my-first-ten-books: Selection[from my-library]

    -- Adding a shared book to a unique selection of shared books:
    my-new-selection = my-selection.add(&my-library.books[23])

    -- Adding a unique book to a unique library of unique books:
    my-new-library = my-library.add(Book(...))
    -- `my-library` is now invalid.

    ()
}


func (lent Library).count-books() -> Size =
    match self.books
    case Array {} then 0
    case Array { _, ...rest } then rest.count-books() + 1
    end


func (lent Selection).count-books() -> Size =
    match self.books
    case Array {} then 0
    case Array { _, ...rest } then rest.count-books() + 1


func all-books-by(author: lent String, library: lent Library) -> Array[lent Book] from library =
    library.books.fold(
        Array {},
        lambda(array, book) =>
            if book.author == author then
                array.push(book)
            else
                array
    )


func all-books-by(author: lent String, library: lent Library) -> Array[lent Book] from library =
    library.books.clone
        .filter(lambda(b) => b.author == author)


func (Array[T]).filter(condition: Func(lent T) -> Bool) -> Array[T]

func (Array[T]).fold(init: U, operation: Func(U, T) -> U) -> Array[U]
